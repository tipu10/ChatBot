"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputDataParser = void 0;
var data_augmenter_1 = require("./data-augmenter");
var entities_parser_1 = require("./entities-parser");
var InputDataParser = /** @class */ (function () {
    function InputDataParser() {
    }
    InputDataParser.prototype.parse = function (inputData) {
        var _this = this;
        var intents = new Set();
        var entities = new Set();
        var samples = new Set();
        inputData.forEach(function (data) {
            var parsedData = _this.parseInputData(data);
            parsedData.intents.forEach(function (i) { return intents.add(i); });
            parsedData.entities.forEach(function (e) { return entities.add(e); });
            parsedData.samples.forEach(function (s) { return samples.add(s); });
        });
        return {
            intents: Array.from(intents),
            entities: Array.from(entities),
            samples: Array.from(samples),
        };
    };
    InputDataParser.prototype.parseInputData = function (inputData) {
        var _a, _b, _c;
        var intent = (_a = inputData.intent) !== null && _a !== void 0 ? _a : '';
        var intents = inputData.intent ? [inputData.intent] : [];
        var entities = (_b = inputData.entities) !== null && _b !== void 0 ? _b : [];
        var augmenterMap = (_c = inputData['data-augmentation']) !== null && _c !== void 0 ? _c : {};
        var sentences = inputData.samples;
        if ('data-augmentation' in inputData) {
            var augmenter = new data_augmenter_1.DataAugmenter(augmenterMap, entities);
            sentences = augmenter.augment(sentences);
        }
        var samples = sentences.map(function (text) {
            return { text: text, intent: intent, entities: [] };
        });
        if (entities.length !== 0) {
            var entitiesParser_1 = new entities_parser_1.EntitiesParser(entities);
            samples = samples.map(function (sample) {
                var _a = entitiesParser_1.parse(sample.text), text = _a.text, entities = _a.entities;
                sample.text = text;
                sample.entities = entities;
                return sample;
            });
        }
        return { intents: intents, entities: entities, samples: samples };
    };
    return InputDataParser;
}());
exports.InputDataParser = InputDataParser;
//# sourceMappingURL=input-data-parser.js.map