"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotonicIntentClassifier = exports.IntentClassifierConfigStorage = void 0;
var path_1 = require("path");
var embeddings_1 = require("../../embeddings");
var encode_1 = require("../../encode");
var model_1 = require("../../model");
var storage_1 = require("../../storage");
var utils_1 = require("../../utils");
var models_1 = require("./models");
var process_1 = require("./process");
var IntentClassifierConfigStorage = /** @class */ (function (_super) {
    __extends(IntentClassifierConfigStorage, _super);
    function IntentClassifierConfigStorage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntentClassifierConfigStorage;
}(storage_1.ConfigStorage));
exports.IntentClassifierConfigStorage = IntentClassifierConfigStorage;
var BotonicIntentClassifier = /** @class */ (function () {
    function BotonicIntentClassifier(config, preprocessor) {
        this.config = __assign(__assign({}, config), { intents: utils_1.unique(config.intents) });
        this.processor = new process_1.Processor(preprocessor, new encode_1.LabelEncoder(new encode_1.IndexedItems(this.config.vocabulary)), new encode_1.OneHotEncoder(new encode_1.IndexedItems(this.config.intents)));
        this.predictionProcessor = new process_1.PredictionProcessor(this.config.intents);
    }
    BotonicIntentClassifier.load = function (path, preprocessor) {
        return __awaiter(this, void 0, void 0, function () {
            var config, classifier, model;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = new IntentClassifierConfigStorage().load(path);
                        classifier = new BotonicIntentClassifier(config, preprocessor);
                        return [4 /*yield*/, new storage_1.ModelStorage().load(path)];
                    case 1:
                        model = _a.sent();
                        classifier.modelManager = new model_1.ModelManager(model);
                        return [2 /*return*/, classifier];
                }
            });
        });
    };
    // TODO: set embeddings as optional
    BotonicIntentClassifier.prototype.createModel = function (template, storage, params) {
        return __awaiter(this, void 0, void 0, function () {
            var embeddingsMatrix;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, embeddings_1.generateEmbeddingsMatrix(storage, this.config.vocabulary)];
                    case 1:
                        embeddingsMatrix = _a.sent();
                        switch (template) {
                            case models_1.INTENT_CLASSIFIER_TEMPLATE.SIMPLE_NN:
                                return [2 /*return*/, models_1.createSimpleNN(this.config.maxLength, this.config.intents.length, embeddingsMatrix, params)];
                            default:
                                throw new Error("\"" + String(template) + "\" is an invalid model template.");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    BotonicIntentClassifier.prototype.setModel = function (model) {
        this.modelManager = new model_1.ModelManager(model);
    };
    BotonicIntentClassifier.prototype.train = function (dataset, epochs, batchSize, balanceClasses) {
        if (balanceClasses === void 0) { balanceClasses = false; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, x, y, args;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.processor.processSamples(dataset.samples), x = _a.x, y = _a.y;
                        args = { epochs: epochs, batchSize: batchSize };
                        if (balanceClasses) {
                            args['classWeight'] = this.getClassWeight(y);
                        }
                        return [4 /*yield*/, this.modelManager.train(x, y, args)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BotonicIntentClassifier.prototype.getClassWeight = function (y) {
        var encodedIntents = y.argMax(1).arraySync();
        var classCount = {};
        encodedIntents.forEach(function (encodedIntent) {
            return encodedIntent in classCount
                ? (classCount[encodedIntent] += 1)
                : (classCount[encodedIntent] = 1);
        });
        var maxCount = Math.max.apply(Math, Object.values(classCount));
        var classWeight = {};
        Object.entries(classCount).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            return (classWeight[key] = maxCount / value);
        });
        return classWeight;
    };
    BotonicIntentClassifier.prototype.evaluate = function (dataset) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, x, y;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.processor.processSamples(dataset.samples), x = _a.x, y = _a.y;
                        return [4 /*yield*/, this.modelManager.evaluate(x, y)];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    BotonicIntentClassifier.prototype.classify = function (text) {
        var input = this.processor.processTexts([text]);
        var prediction = this.modelManager.predict(input);
        var intents = this.predictionProcessor.process(prediction);
        return intents;
    };
    BotonicIntentClassifier.prototype.saveModel = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = path_1.join(path, this.config.locale);
                        new IntentClassifierConfigStorage().save(this.config, path);
                        return [4 /*yield*/, new storage_1.ModelStorage().save(this.modelManager.model, path)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return BotonicIntentClassifier;
}());
exports.BotonicIntentClassifier = BotonicIntentClassifier;
//# sourceMappingURL=botonic-intent-classifier.js.map