"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseStorage = void 0;
var db = require("better-sqlite3");
var fs_1 = require("fs");
var path_1 = require("path");
var downloader_1 = require("../downloader");
var constants_1 = require("./constants");
var DatabaseStorage = /** @class */ (function () {
    function DatabaseStorage(locale, type, dimension) {
        this.locale = locale;
        this.type = type;
        this.dimension = dimension;
        this.checkCompatibility();
    }
    DatabaseStorage.with = function (locale, type, dimension) {
        return __awaiter(this, void 0, void 0, function () {
            var manager;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        manager = new DatabaseStorage(locale, type, dimension);
                        if (!manager.compatible) return [3 /*break*/, 2];
                        return [4 /*yield*/, manager.initialize()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, manager];
                }
            });
        });
    };
    DatabaseStorage.prototype.checkCompatibility = function () {
        if (this.locale in constants_1.SUPPORTED_EMBEDDINGS) {
            if (this.type in constants_1.SUPPORTED_EMBEDDINGS[this.locale]) {
                if (constants_1.SUPPORTED_EMBEDDINGS[this.locale][this.type].includes(this.dimension)) {
                    this.compatible = true;
                    return;
                }
            }
        }
        console.warn("Word embedding config not supported for: " + this.locale + " " + this.type + " " + this.dimension);
        this.compatible = false;
    };
    DatabaseStorage.prototype.initialize = function (logs) {
        if (logs === void 0) { logs = true; }
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkEmbeddingsFile(logs)];
                    case 1:
                        path = _a.sent();
                        this.database = new db(path, { readonly: true });
                        this.statement = this.database.prepare("SELECT * FROM " + constants_1.DB_TABLE_NAME + " WHERE " + constants_1.DB_COLUMN_NAME + " = ?");
                        return [2 /*return*/];
                }
            });
        });
    };
    DatabaseStorage.prototype.checkEmbeddingsFile = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            var log, filename, path, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log = function (msg) { return logs && console.debug(msg); };
                        filename = this.type + "-" + this.dimension + "d-" + this.locale + ".db";
                        path = path_1.join(constants_1.GLOBAL_EMBEDDINGS_PATH, filename);
                        if (!!fs_1.existsSync(path)) return [3 /*break*/, 2];
                        log("The file '" + filename + "' was not found in your machine.");
                        log('An automatic download will start in brief.');
                        log("Downloading '" + filename + "'...");
                        log("Please, wait until the download finishes.\n");
                        url = constants_1.EMBEDDINGS_URL + "/" + filename;
                        return [4 /*yield*/, downloader_1.Downloader.download(url, path)];
                    case 1:
                        _a.sent();
                        log('Download successfully completed.');
                        _a.label = 2;
                    case 2:
                        log("Found '" + filename + "'.");
                        return [2 /*return*/, path];
                }
            });
        });
    };
    DatabaseStorage.prototype.getWordEmbedding = function (word) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.compatible) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.statement.get(word)];
                    case 1:
                        response = _a.sent();
                        if (response) {
                            return [2 /*return*/, response.vector.split(' ').map(function (v) { return parseFloat(v); })];
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, Array(this.dimension).fill(Math.random() * 2 - 1)];
                }
            });
        });
    };
    DatabaseStorage.prototype.finish = function () {
        if (this.compatible) {
            this.database.close();
        }
    };
    return DatabaseStorage;
}());
exports.DatabaseStorage = DatabaseStorage;
//# sourceMappingURL=storage.js.map