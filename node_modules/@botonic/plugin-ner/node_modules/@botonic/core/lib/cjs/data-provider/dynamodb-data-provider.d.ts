import { Entity, Table } from 'dynamodb-toolbox';
import { BotonicEvent, User } from '../models';
import { DataProvider } from './factory';
export declare class DynamoDBDataProvider implements DataProvider {
    region: string;
    tableName: string;
    userEventsTable: Table;
    userEntity: Entity<any>;
    eventEntity: Entity<any>;
    messageEventEntities: Record<string, Entity<any>>;
    textMessageEventEntity: Entity<any>;
    connectionEventEntity: Entity<any>;
    constructor(url: string);
    getUsers(limit?: number, offset?: number): Promise<User[]>;
    getUser(id: string): Promise<User | undefined>;
    getUserByWebsocketId(websocketId: string): Promise<User | undefined>;
    getUserByField(field: string, value: any): Promise<User | undefined>;
    saveUser(user: User): Promise<User>;
    updateUser(user: User): Promise<User>;
    deleteUser(id: string): Promise<User | undefined>;
    getEvents(limit?: number, offset?: number): Promise<BotonicEvent[]>;
    getEvent(id: string): Promise<BotonicEvent | undefined>;
    saveEvent(event: BotonicEvent): Promise<BotonicEvent>;
    updateEvent(event: BotonicEvent): Promise<BotonicEvent>;
    deleteEvent(id: string): Promise<BotonicEvent | undefined>;
}
