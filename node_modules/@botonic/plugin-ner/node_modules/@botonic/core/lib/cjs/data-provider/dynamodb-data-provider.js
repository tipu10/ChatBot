"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoDBDataProvider = void 0;
const models_1 = require("../models");
const dynamodb_utils_1 = require("./dynamodb-utils");
class DynamoDBDataProvider {
    constructor(url) {
        try {
            ;
            [this.tableName, this.region] = url.split('://')[1].split('.');
            this.userEventsTable = dynamodb_utils_1.getUserEventsTable(this.tableName, this.region);
            this.userEntity = dynamodb_utils_1.getUserEntity(this.userEventsTable);
            this.connectionEventEntity = dynamodb_utils_1.getConnectionEventEntity(this.userEventsTable);
            this.messageEventEntities = dynamodb_utils_1.getMessageEventEntities(this.userEventsTable);
        }
        catch (e) {
            console.log({ e });
        }
    }
    // @ts-ignore
    async getUsers(limit = 10, offset = 0) {
        // TODO: finish to implement with offset
        const result = await this.userEventsTable.scan({
            filters: { attr: dynamodb_utils_1.SORT_KEY_NAME, beginsWith: dynamodb_utils_1.USER_PREFIX },
            limit,
        });
        return result.Items;
    }
    async getUser(id) {
        const userById = {
            id: id,
            SK: id,
        };
        const result = await this.userEntity.get(userById);
        if (Object.keys(result).length === 0)
            return undefined;
        return result.Item;
    }
    async getUserByWebsocketId(websocketId) {
        const result = await this.userEventsTable.query(websocketId, {
            index: dynamodb_utils_1.GLOBAL_SECONDARY_INDEX_NAME,
        });
        if (result.Count === 0)
            return undefined;
        return result.Items[0];
    }
    // @ts-ignore
    async getUserByField(field, value) { } //TODO: Implement
    async saveUser(user) {
        const putUser = Object.assign(Object.assign({}, user), { id: user.id, userId: user.id });
        await this.userEntity.put(putUser);
        return user;
    }
    async updateUser(user) {
        const updateUser = Object.assign(Object.assign({}, user), { id: user.id, userId: user.id });
        const res = await this.userEntity.update(updateUser);
        return user;
    }
    // @ts-ignore
    async deleteUser(id) { } // TODO: Implement
    // @ts-ignore
    async getEvents(limit = 10, offset = 0) { } // TODO: Implement
    // @ts-ignore
    async getEvent(id) { } // TODO: Implement
    async saveEvent(event) {
        if (event.eventType === models_1.EventTypes.CONNECTION) {
            await this.connectionEventEntity.put(event);
        }
        if (event.eventType === models_1.EventTypes.MESSAGE) {
            await this.messageEventEntities[event.type].put(event);
        }
        // TODO: Implementation of other event types
        return event;
    }
    // @ts-ignore
    async updateEvent(event) { } // TODO: Implement
    // @ts-ignore
    async deleteEvent(id) { } // TODO: Implement
}
exports.DynamoDBDataProvider = DynamoDBDataProvider;
//# sourceMappingURL=dynamodb-data-provider.js.map