var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ModelSelector } from '@botonic/nlp/lib/model/model-selector';
import { NamedEntityRecognizer } from './ner';
export class NerModelSelector extends ModelSelector {
    static build(locales) {
        return __awaiter(this, void 0, void 0, function* () {
            const baseUrl = (process.env.STATIC_URL && `${process.env.STATIC_URL}/assets/tasks/`) ||
                // @ts-ignore
                (typeof MODELS_BASE_URL !== 'undefined' && MODELS_BASE_URL) ||
                process.env.MODELS_BASE_URL;
            const nerModelsUrl = `${baseUrl}/ner/models`;
            const selector = new NerModelSelector(locales, nerModelsUrl);
            return yield selector.load();
        });
    }
    createModel(config, model) {
        return new NamedEntityRecognizer(config, model);
    }
}
//# sourceMappingURL=model-selector.js.map