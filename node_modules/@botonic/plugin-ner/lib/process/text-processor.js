import { IndexedItems } from '@botonic/nlp/lib/encode/indexed-items';
import { LabelEncoder } from '@botonic/nlp/lib/encode/label-encoder';
import { PADDING_TOKEN, UNKNOWN_TOKEN, } from '@botonic/nlp/lib/preprocess/constants';
import { tensor } from '@tensorflow/tfjs';
export class TextProcessor {
    constructor(vocabulary, preprocessor) {
        this.vocabulary = vocabulary;
        this.preprocessor = preprocessor;
    }
    process(text) {
        const sequence = this.preprocessor.preprocess(text, PADDING_TOKEN);
        const maskedSequence = this.maskUnknownTokens(sequence);
        const encodedSequence = this.encodeSequence(maskedSequence);
        const input = tensor([encodedSequence]);
        return { sequence, input };
    }
    maskUnknownTokens(sequence) {
        return sequence.map(token => this.vocabulary.includes(token) ? token : UNKNOWN_TOKEN);
    }
    encodeSequence(sequence) {
        const codifier = new LabelEncoder(new IndexedItems(this.vocabulary));
        return codifier.encode(sequence);
    }
}
//# sourceMappingURL=text-processor.js.map