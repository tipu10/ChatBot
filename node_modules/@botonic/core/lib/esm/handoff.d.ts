import { Session } from './models';
export interface HubtypeAgentsInfo {
    attending_count: number;
    email: string;
    idle_count: number;
    last_message_sent: string;
    status: string;
}
export interface HubtypeSession extends Session {
    _hubtype_api?: string;
    _access_token: string;
}
export interface SessionWithBotonicAction extends Session {
    _botonic_action: string;
}
export interface BackendContext {
    timeoutMs: number;
}
export interface VacationRange {
    end_date: number;
    id: number;
    start_date: number;
}
export type HandoffExtraData = {
    language?: string;
    url?: string;
    location?: string;
};
export declare function getOpenQueues(session: HubtypeSession, context?: {}): Promise<{
    queues: string[];
}>;
export declare class HandOffBuilder {
    _session: SessionWithBotonicAction;
    _queue: string;
    _onFinish: string;
    _email: string;
    _agentId: string;
    _forceAssignIfNotAvailable: boolean;
    _autoAssignOnWaiting: boolean;
    _note: string;
    _caseInfo: string;
    _autoIdleMessage: string;
    _shadowing: boolean;
    _extraData: HandoffExtraData;
    constructor(session: SessionWithBotonicAction);
    withQueue(queueNameOrId: string): this;
    withOnFinishPayload(payload: string): this;
    withOnFinishPath(path: string): this;
    withAgentEmail(email: string): this;
    withAgentId(agentId: string): this;
    withForceAssignIfNotAvailable(forceAssign: boolean): this;
    withAutoAssignOnWaiting(autoAssignOnWaiting: boolean): this;
    withNote(note: string): this;
    withCaseInfo(caseInfo: string): this;
    withAutoIdleMessage(message: string): this;
    withShadowing(shadowing?: boolean): this;
    withExtraData(extraData: HandoffExtraData): this;
    handOff(): Promise<void>;
}
/**
 * @deprecated use {@link HandOffBuilder} class instead
 */
export declare function humanHandOff(session: any, queueNameOrId: string | undefined, onFinish: any): Promise<void>;
export declare function storeCaseRating(session: HubtypeSession, rating: number, context?: any): Promise<{
    status: string;
}>;
export declare function getAvailableAgentsByQueue(session: HubtypeSession, queueId: string): Promise<{
    agents: string[];
}>;
export declare function getAvailableAgents(session: HubtypeSession): Promise<{
    agents: HubtypeAgentsInfo[];
}>;
export declare function getAgentVacationRanges(session: HubtypeSession, { agentId, agentEmail }: {
    agentId?: string;
    agentEmail?: string;
}): Promise<{
    vacation_ranges: VacationRange[];
}>;
export declare function cancelHandoff(session: SessionWithBotonicAction, typification?: string | null): void;
export declare function deleteUser(session: SessionWithBotonicAction): void;
