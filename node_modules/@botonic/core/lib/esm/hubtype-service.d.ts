import { AxiosResponse } from 'axios';
import Pusher, { Channel } from 'pusher-js';
import { Input, SessionUser } from './models';
interface UnsentInput {
    id: string;
    ack: number;
    unsentInput: Input;
}
interface BotonicHeaders {
    'X-BOTONIC-USER-ID': string;
    'X-BOTONIC-LAST-MESSAGE-ID': string;
    'X-BOTONIC-LAST-MESSAGE-UPDATE-DATE': string;
}
interface ServerConfig {
    activityTimeout?: number;
    pongTimeout?: number;
}
interface HubtypeServiceArgs {
    appId: string;
    user: SessionUser;
    lastMessageId: string;
    lastMessageUpdateDate: string;
    onEvent: any;
    unsentInputs: () => UnsentInput[];
    server: ServerConfig;
}
/**
 * Calls Hubtype APIs from Webchat
 */
export declare class HubtypeService {
    appId: string;
    user: SessionUser;
    lastMessageId: string;
    lastMessageUpdateDate: string;
    onEvent: any;
    unsentInputs: () => UnsentInput[];
    pusher: Pusher | null;
    channel: Channel;
    server: ServerConfig;
    PUSHER_CONNECT_TIMEOUT_MS: number;
    constructor({ appId, user, lastMessageId, lastMessageUpdateDate, onEvent, unsentInputs, server, }: HubtypeServiceArgs);
    /**
     * @returns {Promise<void>}
     */
    init(user: any, lastMessageId: any, lastMessageUpdateDate: any): Promise<void>;
    /**
     * @returns {Promise<void>}
     */
    _initPusher(): Promise<void>;
    constructHeaders(): BotonicHeaders;
    resolveServerConfig(): ServerConfig;
    updateAuthHeaders(): void;
    handleConnectionChange(online: boolean): void;
    onPusherEvent(event: any): void;
    get pusherChannel(): string;
    handleSentInput(message: any): void;
    handleUnsentInput(message: any): void;
    /**
     * @return {Promise<void>}
     */
    postMessage(user: SessionUser, message: any): Promise<void>;
    static getWebchatVisibility({ appId, }: {
        appId: string;
    }): Promise<AxiosResponse<any>>;
    destroyPusher(): void;
    onConnectionRegained(): Promise<void>;
    resendUnsentInputs(): Promise<void>;
}
export {};
