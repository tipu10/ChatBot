import { EventTypes, } from '../models';
import { TEXT_NODE_NAME } from './botonic-output-parser';
export function parseNumber(strNumber) {
    return parseInt(strNumber);
}
export function parseBoolean(strNumber) {
    if (strNumber === '0')
        return false;
    return true;
}
// COMMON
export const parseMessage = args => {
    const typingAndDelay = {};
    if (args.toParse.delay !== undefined) {
        typingAndDelay['delay'] = parseNumber(args.toParse.delay);
    }
    if (args.toParse.typing !== undefined) {
        typingAndDelay['typing'] = parseNumber(args.toParse.typing);
    }
    return {
        toParse: args.toParse,
        parsed: Object.assign({ 
            // Following properties added later before saving event: eventId, userId, createdAt, from, ack
            eventType: EventTypes.MESSAGE, type: args.toParse.type, ack: args.toParse.ack, from: args.toParse.from }, typingAndDelay),
    };
};
// BUTTONS
export const parseButton = (button) => {
    const title = button[TEXT_NODE_NAME];
    if ('payload' in button) {
        return { title, payload: button.payload };
    }
    if ('url' in button) {
        const b = { title, url: button.url, target: button.target };
        if (button.target)
            b.target = button.target;
        return b;
    }
    if ('webview' in button) {
        return {
            title,
            webview: button.webview,
            params: button.params,
        };
    }
    throw new Error('Invalid parsed Button');
};
export const parseButtons = args => {
    var _a, _b;
    const hasButtons = ((_b = (_a = args.toParse) === null || _a === void 0 ? void 0 : _a.button) === null || _b === void 0 ? void 0 : _b.length) > 0;
    let buttons = [];
    if (hasButtons) {
        buttons = args.toParse.button.map(button => parseButton(button));
    }
    return {
        toParse: args.toParse,
        parsed: Object.assign(Object.assign({}, args.parsed), { buttons }),
    };
};
// REPLIES
export const parseReply = (reply) => ({
    title: reply[TEXT_NODE_NAME],
    payload: reply.payload,
});
export const parseReplies = args => {
    var _a, _b;
    const hasReplies = ((_b = (_a = args.toParse) === null || _a === void 0 ? void 0 : _a.reply) === null || _b === void 0 ? void 0 : _b.length) > 0;
    let replies = [];
    if (hasReplies) {
        replies = args.toParse.reply.map(reply => parseReply(reply));
    }
    return {
        toParse: args.toParse,
        parsed: Object.assign(Object.assign({}, args.parsed), { replies }),
    };
};
// TEXT
export const parseText = args => {
    return {
        toParse: args.toParse,
        parsed: Object.assign(Object.assign({}, args.parsed), { text: args.toParse[TEXT_NODE_NAME], markdown: parseBoolean(args.toParse.markdown) }),
    };
};
// POSTBACK
export const parsePostback = args => {
    return {
        toParse: args.toParse,
        parsed: Object.assign(Object.assign({}, args.parsed), { payload: args.toParse.payload }),
    };
};
// MEDIA
export const parseMedia = args => {
    return {
        toParse: args.toParse,
        parsed: Object.assign(Object.assign({}, args.parsed), { src: args.toParse.src }),
    };
};
// LOCATION
export const parseLocation = args => {
    return {
        toParse: args.toParse,
        parsed: Object.assign(Object.assign({}, args.parsed), { lat: args.toParse.lat, long: args.toParse.long }),
    };
};
// CAROUSEL
export const parseElement = (element) => {
    const e = {
        pic: element.pic,
        title: element.title,
        subtitle: element.desc,
    };
    const hasButtons = element.button !== undefined;
    if (hasButtons)
        e.buttons = element.button.map(b => parseButton(b));
    return e;
};
export const parseCarousel = args => {
    return {
        toParse: args.toParse,
        parsed: Object.assign(Object.assign({}, args.parsed), { elements: args.toParse.element.map(element => parseElement(element)) }),
    };
};
// CUSTOM
export const parseCustom = args => {
    return {
        toParse: args.toParse,
        parsed: Object.assign(Object.assign({}, args.parsed), { json: JSON.parse(args.toParse.json) }),
    };
};
//# sourceMappingURL=parsers.js.map