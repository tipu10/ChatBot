import { DataProvider } from '../data-provider';
import { BotonicEvent } from './events';
export declare type CaseStatusType = typeof CASE_STATUS.ATTENDING | typeof CASE_STATUS.IDLE | typeof CASE_STATUS.RESOLVED | typeof CASE_STATUS.WAITING;
export declare type CaseResolution = typeof CASE_RESOLUTION.BANNED | typeof CASE_RESOLUTION.NOK | typeof CASE_RESOLUTION.NOT_SOLVED | typeof CASE_RESOLUTION.OK;
export declare const PROVIDER: Readonly<{
    DEV: string;
    FACEBOOK: string;
    GENERIC: string;
    INTERCOM: string;
    SMOOCH: string;
    TELEGRAM: string;
    TWITTER: string;
    WEBCHAT: string;
    WECHAT: string;
    WHATSAPP: string;
}>;
export declare const INPUT: Readonly<{
    TEXT: string;
    POSTBACK: string;
    AUDIO: string;
    IMAGE: string;
    VIDEO: string;
    DOCUMENT: string;
    LOCATION: string;
    CONTACT: string;
    BUTTON_MESSAGE: string;
    CAROUSEL: string;
    CUSTOM: string;
    WEBCHAT_SETTINGS: string;
    WHATSAPP_TEMPLATE: string;
    RAW: string;
}>;
export declare const CASE_STATUS: Readonly<{
    WAITING: string;
    ATTENDING: string;
    IDLE: string;
    RESOLVED: string;
}>;
export declare const CASE_RESOLUTION: Readonly<{
    OK: string;
    NOK: string;
    NOT_SOLVED: string;
    BANNED: string;
}>;
export interface Locales {
    [id: string]: string | string[] | Locales;
}
interface PluginConstructor<T> {
    new (arg: T): Plugin;
}
export interface PluginConfig<T> {
    id: string;
    options?: T;
    resolve: {
        default: PluginConstructor<T>;
    };
}
export declare type InputType = typeof INPUT.AUDIO | typeof INPUT.BUTTON_MESSAGE | typeof INPUT.CAROUSEL | typeof INPUT.CONTACT | typeof INPUT.CUSTOM | typeof INPUT.DOCUMENT | typeof INPUT.IMAGE | typeof INPUT.LOCATION | typeof INPUT.POSTBACK | typeof INPUT.TEXT | typeof INPUT.VIDEO | typeof INPUT.WEBCHAT_SETTINGS | typeof INPUT.WHATSAPP_TEMPLATE;
export interface IntentResult {
    intent: string;
    confidence: number;
}
/** Generated by Translation plugins: GoogleTranslation **/
export interface Translations {
    [languageCode: string]: string;
}
/** Fields set by NLU plugins: Luis, Dialogflow, ... **/
export interface NluResult {
    confidence: number;
    intent: string;
    intents: IntentResult[];
    language: string;
    entities?: any;
    translations: Translations;
}
export interface Input extends Partial<NluResult> {
    text?: string;
    src?: string;
    data?: string;
    path?: string;
    payload?: string;
    type: InputType;
}
export declare type ProviderType = typeof PROVIDER.DEV | typeof PROVIDER.FACEBOOK | typeof PROVIDER.GENERIC | typeof PROVIDER.INTERCOM | typeof PROVIDER.SMOOCH | typeof PROVIDER.TELEGRAM | typeof PROVIDER.TWITTER | typeof PROVIDER.WEBCHAT | typeof PROVIDER.WECHAT | typeof PROVIDER.WHATSAPP;
export interface SessionUser {
    id: string;
    username?: string;
    name?: string;
    provider: ProviderType;
    extra_data?: any;
    imp_id?: string;
    provider_id?: string;
}
export interface Session {
    bot: {
        id: string;
        name?: string;
    };
    __locale?: string;
    __retries: number;
    is_first_interaction: boolean;
    last_session?: any;
    organization?: string;
    user: SessionUser;
    _hubtype_case_status?: CaseStatusType;
    _hubtype_case_typification?: string;
    _shadowing?: boolean;
}
export declare type InputMatcher = (input: Input) => boolean;
export declare type ParamsMatcher = {
    [key: string]: string;
} | ((params: {
    [key: string]: string;
}) => boolean);
export declare type SessionMatcher = (session: Session) => boolean;
export declare type RequestMatcher = (request: BotRequest) => boolean;
export declare type StringMatcher = RegExp | string | ((data: string) => boolean);
export declare type RouteMatcher = InputMatcher | ParamsMatcher | RequestMatcher | SessionMatcher | StringMatcher;
export interface Route {
    action?: any;
    childRoutes?: Route[];
    lastRoutePath?: string;
    ignoreRetry?: boolean;
    path: RoutePath;
    redirect?: string;
    retry?: number;
    input?: InputMatcher;
    intent?: StringMatcher;
    params?: ParamsMatcher;
    payload?: StringMatcher;
    request?: RequestMatcher;
    session?: SessionMatcher;
    text?: StringMatcher;
    data?: StringMatcher;
    type?: StringMatcher;
}
export declare type Routes<R = Route> = R[] | ((_: BotRequest) => R[]);
export interface BotRequest {
    input: Input;
    lastRoutePath: RoutePath;
    session: Session;
    dataProvider?: DataProvider;
}
/** The response of the bot for the triggered actions, which can be
 * the one matched by the routes, the default action and the retry actions.
 * See Response at @botonic/react's index.d.ts for the React type
 * */
export interface BotResponse extends BotRequest {
    response: any;
    messageEvents: Partial<BotonicEvent>[] | null;
}
export interface PluginPreRequest extends BotRequest {
    plugins: Plugin[];
}
export interface PluginPostRequest extends BotResponse {
    plugins: Plugin[];
}
export interface Plugin {
    post(request: PluginPostRequest): void;
    pre(request: PluginPreRequest): void;
}
export interface Params {
    [key: string]: any;
}
export declare const Providers: Readonly<{
    Messaging: {
        FACEBOOK: string;
        GENERIC: string;
        IMBEE: string;
        INTERCOM: string;
        SMOOCH_WEB: string;
        SMOOCH: string;
        TELEGRAM: string;
        TWITTER: string;
        WEBCHAT: string;
        WECHAT: string;
        WHATSAPP: string;
    };
}>;
export declare type Nullable<T> = T | null;
export declare type Action = Nullable<() => any>;
export declare type RoutePath = Nullable<string>;
export interface ProcessInputResult {
    action: Action;
    emptyAction: Action;
    fallbackAction: Action;
    lastRoutePath: RoutePath;
    params: Params;
}
export declare type MatchedValue = boolean | RegExpExecArray | null;
export declare type RoutingState = {
    currentRoute: Nullable<Route>;
    matchedRoute: Nullable<Route>;
    params: Params;
    isFlowBroken: boolean;
};
export interface RouteParams {
    route: Nullable<Route>;
    params: Params;
}
export interface PathParams {
    path: RoutePath;
    params: Params;
}
export declare type MatchingProp = 'text' | 'payload' | 'intent' | 'type' | 'input' | 'session' | 'request';
export declare type Matcher = string | RegExp | ((args: any) => boolean);
export {};
