"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotonicOutputParser = exports.TEXT_NODE_NAME = void 0;
// eslint-disable-next-line import/named
const fast_xml_parser_1 = require("fast-xml-parser");
const html_entities_1 = require("html-entities");
const factory_1 = require("./factory");
exports.TEXT_NODE_NAME = 'text';
class BotonicOutputParser {
    constructor(factory = new factory_1.MessageParsingFactory()) {
        this.factory = factory;
    }
    xmlToMessageEvents(html) {
        const jsonMessages = this.xmlToJSONMessages(html);
        return jsonMessages.map(msgToParse => this.factory.parse(msgToParse));
    }
    /**
     * Right now, when saving BotonicEvents to DataProvider, we need the standarized Botonic event
     * to be saved. This is, converting a botonic input like: '{id: 'msgId', data: 'rawData', payload: 'somePayload'}'
     * into a BotonicEvent with the expected properties.
     */
    parseFromUserInput(input) {
        return this.factory.parse(input);
    }
    xmlToJSONMessages(html) {
        return fast_xml_parser_1.parse(html, BotonicOutputParser.OPTIONS).message;
    }
}
exports.BotonicOutputParser = BotonicOutputParser;
BotonicOutputParser.OPTIONS = {
    ignoreAttributes: false,
    attributeNamePrefix: '',
    textNodeName: exports.TEXT_NODE_NAME,
    arrayMode: true,
    attrValueProcessor: a => html_entities_1.decode(a),
};
//# sourceMappingURL=botonic-output-parser.js.map