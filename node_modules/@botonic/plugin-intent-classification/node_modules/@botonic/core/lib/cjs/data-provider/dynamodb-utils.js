"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMessageEventEntities = exports.getConnectionEventEntity = exports.getUserEntity = exports.getUserEventsTable = exports.EVENT_PREFIX = exports.USER_PREFIX = exports.SORT_KEY_NAME = exports.PARTITION_KEY_NAME = exports.GLOBAL_SECONDARY_INDEX_ATTR = exports.GLOBAL_SECONDARY_INDEX_NAME = void 0;
const aws_sdk_1 = require("aws-sdk");
const dynamodb_toolbox_1 = require("dynamodb-toolbox");
const models_1 = require("../models");
// Table Definitions
exports.GLOBAL_SECONDARY_INDEX_NAME = 'GSI1';
exports.GLOBAL_SECONDARY_INDEX_ATTR = 'websocketId';
exports.PARTITION_KEY_NAME = 'PK';
exports.SORT_KEY_NAME = 'SK';
// Entities Definitions
exports.USER_PREFIX = 'USR#';
exports.EVENT_PREFIX = 'EVT#';
function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
function getUserEventsTable(tableName, region) {
    const documentClient = new aws_sdk_1.DynamoDB.DocumentClient({
        apiVersion: '2012-08-10',
        region: region,
    });
    return new dynamodb_toolbox_1.Table({
        name: tableName,
        partitionKey: exports.PARTITION_KEY_NAME,
        sortKey: exports.SORT_KEY_NAME,
        entityField: true,
        indexes: {
            GSI1: {
                partitionKey: exports.GLOBAL_SECONDARY_INDEX_ATTR,
            },
        },
        DocumentClient: documentClient,
    });
}
exports.getUserEventsTable = getUserEventsTable;
function getUserEntity(table) {
    return new dynamodb_toolbox_1.Entity({
        name: 'User',
        attributes: {
            id: { partitionKey: true, prefix: exports.USER_PREFIX },
            [`${exports.SORT_KEY_NAME}`]: {
                hidden: true,
                sortKey: true,
                prefix: exports.USER_PREFIX,
            },
            userId: [exports.SORT_KEY_NAME, 0],
            websocketId: 'string',
            isOnline: 'boolean',
            route: 'string',
            session: 'string',
        },
        table,
    });
}
exports.getUserEntity = getUserEntity;
function getConnectionEventEntity(table) {
    return new dynamodb_toolbox_1.Entity({
        name: 'Connection Event',
        attributes: {
            userId: { partitionKey: true, prefix: exports.USER_PREFIX },
            [`${exports.SORT_KEY_NAME}`]: {
                hidden: true,
                sortKey: true,
                prefix: exports.EVENT_PREFIX,
            },
            eventId: [exports.SORT_KEY_NAME, 0],
            eventType: 'string',
            createdAt: 'string',
            modifiedAt: 'string',
            status: 'string',
        },
        table,
    });
}
exports.getConnectionEventEntity = getConnectionEventEntity;
function getMessageEventEntities(table) {
    const textAttributes = {
        text: 'string',
        markdown: 'boolean',
        buttons: 'list',
        replies: 'list',
    };
    const mediaAttributes = {
        src: 'string',
        buttons: 'list',
    };
    const locationAttributes = {
        lat: 'number',
        long: 'number',
    };
    const carouselAttributes = {
        elements: 'list',
    };
    const customAttributes = {
        json: 'map',
        replies: 'list',
    };
    const entityWithAttributes = (type, attributes) => new dynamodb_toolbox_1.Entity({
        name: `${capitalize(type)} Message Event`,
        attributes: Object.assign({ userId: { partitionKey: true, prefix: exports.USER_PREFIX }, [`${exports.SORT_KEY_NAME}`]: {
                hidden: true,
                sortKey: true,
                prefix: exports.EVENT_PREFIX,
            }, eventId: [exports.SORT_KEY_NAME, 0], eventType: 'string', createdAt: 'string', modifiedAt: 'string', from: 'string', ack: 'string', typing: 'number', delay: 'number', type: 'string' }, attributes),
        table,
    });
    return {
        text: entityWithAttributes(models_1.MessageEventTypes.TEXT, textAttributes),
        audio: entityWithAttributes(models_1.MessageEventTypes.AUDIO, mediaAttributes),
        image: entityWithAttributes(models_1.MessageEventTypes.IMAGE, mediaAttributes),
        document: entityWithAttributes(models_1.MessageEventTypes.DOCUMENT, mediaAttributes),
        video: entityWithAttributes(models_1.MessageEventTypes.VIDEO, mediaAttributes),
        location: entityWithAttributes(models_1.MessageEventTypes.LOCATION, locationAttributes),
        carousel: entityWithAttributes(models_1.MessageEventTypes.CAROUSEL, carouselAttributes),
        custom: entityWithAttributes(models_1.MessageEventTypes.CUSTOM, customAttributes),
    };
}
exports.getMessageEventEntities = getMessageEventEntities;
//# sourceMappingURL=dynamodb-utils.js.map