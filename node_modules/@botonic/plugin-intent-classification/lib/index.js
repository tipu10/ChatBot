var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { INPUT } from '@botonic/core';
import { IntentModelSelector } from './model/model-selector';
export default class BotonicPluginIntentClassification {
    constructor(options) {
        this.options = options;
        this.modelsSelector = IntentModelSelector.build(this.options.locales);
    }
    pre(request) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const language = request.input.language || request.session.__locale;
                if (request.input.type == INPUT.TEXT && !request.input.payload) {
                    const inputText = request.input.data;
                    const classifier = (yield this.modelsSelector).select(language);
                    const intents = classifier.classify(inputText);
                    Object.assign(request.input, { intent: intents[0].label, intents });
                }
            }
            catch (e) {
                console.error(`Cannot classify the input: ${JSON.stringify(request.input)}`, e);
            }
        });
    }
    post(request) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
}
//# sourceMappingURL=index.js.map