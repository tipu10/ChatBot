"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readDataURL = exports.isVideo = exports.isText = exports.isPostback = exports.isOfType = exports.isMedia = exports.isLocation = exports.isImage = exports.isDocument = exports.isCustom = exports.isContact = exports.isCarousel = exports.isButtonMessage = exports.isAudio = exports.isAllowedSize = exports.getMediaType = exports.getFullMimeWhitelist = exports.INPUT_MEDIA_TYPES = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _core = require("@botonic/core");

var _constants = require("./constants");

var isOfType = function isOfType(msgType, type) {
  return msgType === type;
};

exports.isOfType = isOfType;

var isText = function isText(msg) {
  return isOfType(msg.type, _core.INPUT.TEXT);
};

exports.isText = isText;

var isPostback = function isPostback(msg) {
  return isOfType(msg.type, _core.INPUT.POSTBACK);
};

exports.isPostback = isPostback;

var isAudio = function isAudio(msg) {
  return isOfType(msg.type, _core.INPUT.AUDIO);
};

exports.isAudio = isAudio;

var isImage = function isImage(msg) {
  return isOfType(msg.type, _core.INPUT.IMAGE);
};

exports.isImage = isImage;

var isVideo = function isVideo(msg) {
  return isOfType(msg.type, _core.INPUT.VIDEO);
};

exports.isVideo = isVideo;

var isDocument = function isDocument(msg) {
  return isOfType(msg.type, _core.INPUT.DOCUMENT);
};

exports.isDocument = isDocument;

var isLocation = function isLocation(msg) {
  return isOfType(msg.type, _core.INPUT.LOCATION);
};

exports.isLocation = isLocation;

var isContact = function isContact(msg) {
  return isOfType(msg.type, _core.INPUT.CONTACT);
};

exports.isContact = isContact;

var isCarousel = function isCarousel(msg) {
  return isOfType(msg.type, _core.INPUT.CAROUSEL);
};

exports.isCarousel = isCarousel;

var isCustom = function isCustom(msg) {
  return isOfType(msg.type, _core.INPUT.CUSTOM);
};

exports.isCustom = isCustom;

var isButtonMessage = function isButtonMessage(msg) {
  return isOfType(msg.type, _core.INPUT.BUTTON_MESSAGE);
};

exports.isButtonMessage = isButtonMessage;
var INPUT_MEDIA_TYPES = [_core.INPUT.AUDIO, _core.INPUT.IMAGE, _core.INPUT.VIDEO, _core.INPUT.DOCUMENT];
exports.INPUT_MEDIA_TYPES = INPUT_MEDIA_TYPES;

var isMedia = function isMedia(message) {
  return INPUT_MEDIA_TYPES.some(function (type) {
    return isOfType(message.type, type);
  });
}; // TODO: Centralize handling attachments in class


exports.isMedia = isMedia;

var readDataURL = function readDataURL(file) {
  return new Promise(function (resolve, reject) {
    var reader = new FileReader();
    reader.readAsDataURL(file);

    reader.onload = function () {
      return resolve(reader.result);
    };

    reader.onerror = function (error) {
      return reject(error);
    };
  });
};

exports.readDataURL = readDataURL;

var isAllowedSize = function isAllowedSize(fileSize) {
  var maxAllowedBytesSize = _constants.MAX_ALLOWED_SIZE_MB * 1024 * 1024;
  if (fileSize > maxAllowedBytesSize) return false;
  return true;
};

exports.isAllowedSize = isAllowedSize;

var getMediaType = function getMediaType(fileType) {
  return Object.entries(_constants.MIME_WHITELIST).filter(function (_ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
        _ = _ref2[0],
        formatsForType = _ref2[1];

    return formatsForType.includes(fileType);
  }).map(function (_ref3) {
    var _ref4 = (0, _slicedToArray2["default"])(_ref3, 2),
        type = _ref4[0],
        _ = _ref4[1];

    return type;
  })[0];
};

exports.getMediaType = getMediaType;

var getFullMimeWhitelist = function getFullMimeWhitelist() {
  return Object.values(_constants.MIME_WHITELIST).map(function (acceptedFormatsForType) {
    return acceptedFormatsForType.join(',');
  });
};

exports.getFullMimeWhitelist = getFullMimeWhitelist;
//# sourceMappingURL=message-utils.js.map