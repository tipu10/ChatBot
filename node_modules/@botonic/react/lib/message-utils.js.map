{"version":3,"sources":["../src/message-utils.js"],"names":["isOfType","msgType","type","isText","msg","INPUT","TEXT","isPostback","POSTBACK","isAudio","AUDIO","isImage","IMAGE","isVideo","VIDEO","isDocument","DOCUMENT","isLocation","LOCATION","isContact","CONTACT","isCarousel","CAROUSEL","isCustom","CUSTOM","isButtonMessage","BUTTON_MESSAGE","INPUT_MEDIA_TYPES","isMedia","message","some","readDataURL","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","isAllowedSize","fileSize","maxAllowedBytesSize","MAX_ALLOWED_SIZE_MB","getMediaType","fileType","Object","entries","MIME_WHITELIST","filter","_","formatsForType","includes","map","getFullMimeWhitelist","values","acceptedFormatsForType","join"],"mappings":"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","sourcesContent":["import { INPUT } from '@botonic/core'\n\nimport { MAX_ALLOWED_SIZE_MB, MIME_WHITELIST } from './constants'\n\nexport const isOfType = (msgType, type) => msgType === type\n\nexport const isText = msg => isOfType(msg.type, INPUT.TEXT)\nexport const isPostback = msg => isOfType(msg.type, INPUT.POSTBACK)\nexport const isAudio = msg => isOfType(msg.type, INPUT.AUDIO)\nexport const isImage = msg => isOfType(msg.type, INPUT.IMAGE)\nexport const isVideo = msg => isOfType(msg.type, INPUT.VIDEO)\nexport const isDocument = msg => isOfType(msg.type, INPUT.DOCUMENT)\nexport const isLocation = msg => isOfType(msg.type, INPUT.LOCATION)\nexport const isContact = msg => isOfType(msg.type, INPUT.CONTACT)\nexport const isCarousel = msg => isOfType(msg.type, INPUT.CAROUSEL)\nexport const isCustom = msg => isOfType(msg.type, INPUT.CUSTOM)\nexport const isButtonMessage = msg => isOfType(msg.type, INPUT.BUTTON_MESSAGE)\n\nexport const INPUT_MEDIA_TYPES = [\n  INPUT.AUDIO,\n  INPUT.IMAGE,\n  INPUT.VIDEO,\n  INPUT.DOCUMENT,\n]\n\nexport const isMedia = message =>\n  INPUT_MEDIA_TYPES.some(type => isOfType(message.type, type))\n\n// TODO: Centralize handling attachments in class\n\nexport const readDataURL = file =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.onload = () => resolve(reader.result)\n    reader.onerror = error => reject(error)\n  })\n\nexport const isAllowedSize = fileSize => {\n  const maxAllowedBytesSize = MAX_ALLOWED_SIZE_MB * 1024 * 1024\n  if (fileSize > maxAllowedBytesSize) return false\n  return true\n}\n\nexport const getMediaType = fileType => {\n  return Object.entries(MIME_WHITELIST)\n    .filter(([_, formatsForType]) => formatsForType.includes(fileType))\n    .map(([type, _]) => type)[0]\n}\n\nexport const getFullMimeWhitelist = () =>\n  Object.values(MIME_WHITELIST).map(acceptedFormatsForType =>\n    acceptedFormatsForType.join(',')\n  )\n"],"file":"message-utils.js"}