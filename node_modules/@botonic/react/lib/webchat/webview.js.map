{"version":3,"sources":["../../src/webchat/webview.jsx"],"names":["StyledWebview","styled","div","COLORS","SOLID_WHITE","WEBCHAT","DEFAULTS","BORDER_RADIUS_TOP_CORNERS","StyledWebviewHeader","WILD_SAND_WHITE","SOLID_BLACK_ALPHA_0_2","StyledCloseHeader","StyledWebviewContent","StyledFrame","iframe","WebviewMode","props","style","borderStyle","width","height","asframe","children","WebviewHeader","RequestContext","closeWebview","WebchatContext","getThemeProperty","ROLES","WEBVIEW_HEADER","CUSTOM_PROPERTIES","webviewHeaderStyle","WebviewContainer","webchatState","Webview","webview","close","e","data","window","addEventListener","attachEvent","WEBVIEW","flex"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react'\nimport Frame from 'react-frame-component'\nimport styled from 'styled-components'\n\nimport { COLORS, ROLES, WEBCHAT } from '../constants'\nimport { RequestContext, WebchatContext } from '../contexts'\n\nconst StyledWebview = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-color: ${COLORS.SOLID_WHITE};\n  z-index: 2;\n  border-radius: ${WEBCHAT.DEFAULTS.BORDER_RADIUS_TOP_CORNERS};\n`\n\nconst StyledWebviewHeader = styled.div`\n  text-align: right;\n  background-color: ${COLORS.WILD_SAND_WHITE};\n  border-top: 1px solid ${COLORS.SOLID_BLACK_ALPHA_0_2};\n  border-bottom: 1px solid ${COLORS.SOLID_BLACK_ALPHA_0_2};\n  border-radius: ${WEBCHAT.DEFAULTS.BORDER_RADIUS_TOP_CORNERS};\n`\nconst StyledCloseHeader = styled.div`\n  display: inline-block;\n  padding: 8px 12px;\n  cursor: pointer;\n`\n\nconst StyledWebviewContent = styled.div`\n  flex: 1;\n  overflow: auto;\n`\n\nconst StyledFrame = styled.iframe`\n  border-style: none;\n  width: 100%;\n  height: 100%;\n`\n\nconst WebviewMode = props => {\n  /*\n    Default mode is with divs.\n    Setting the prop \"asframe\" will render the webview inside an iframe.\n    Pros and Cons of this \"asframe\" mode are:\n    Pros: OAuth2 flows can be tested locally with an iframe.\n    Cons: We won't be able to visualize correctly css styles in botonic serve (although styles will work in production).\n   */\n\n  const style = {\n    borderStyle: 'none',\n    width: '100%',\n    height: '100%',\n  }\n  if (props.asframe) {\n    return <Frame style={style}>{props.children}</Frame>\n  }\n  return <div style={style}>{props.children}</div>\n}\n\nexport const WebviewHeader = () => {\n  const { closeWebview } = useContext(RequestContext)\n  const { getThemeProperty } = useContext(WebchatContext)\n  return (\n    <StyledWebviewHeader\n      role={ROLES.WEBVIEW_HEADER}\n      style={{\n        ...getThemeProperty(WEBCHAT.CUSTOM_PROPERTIES.webviewHeaderStyle),\n      }}\n    >\n      <StyledCloseHeader onClick={closeWebview}>âœ•</StyledCloseHeader>\n    </StyledWebviewHeader>\n  )\n}\n\nexport const WebviewContainer = props => {\n  const { webchatState } = useContext(WebchatContext)\n  const { closeWebview } = useContext(RequestContext)\n  const Webview = webchatState.webview\n\n  const close = e => e.data == 'botonicCloseWebview' && closeWebview()\n\n  useEffect(() => {\n    if (window.addEventListener) {\n      window.addEventListener('message', close, false)\n    } else if (window.attachEvent) {\n      // ie8\n      window.attachEvent('onmessage', close)\n    }\n  }, [])\n\n  return (\n    <StyledWebview\n      role={ROLES.WEBVIEW}\n      style={{\n        ...props.style,\n      }}\n    >\n      <WebviewHeader style={{ flex: 'none' }} />\n      <StyledWebviewContent>\n        {typeof Webview === 'string' ? (\n          <StyledFrame src={Webview} />\n        ) : (\n          <WebviewMode>\n            <Webview />\n          </WebviewMode>\n        )}\n      </StyledWebviewContent>\n    </StyledWebview>\n  )\n}\n"],"file":"webview.js"}