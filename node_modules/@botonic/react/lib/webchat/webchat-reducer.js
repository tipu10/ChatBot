"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.webchatReducer = webchatReducer;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _actions = require("./actions");

var _messagesReducer = require("./messages-reducer");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

// eslint-disable-next-line complexity
function webchatReducer(state, action) {
  switch (action.type) {
    case _actions.UPDATE_WEBVIEW:
      return _objectSpread(_objectSpread({}, state), action.payload);

    case _actions.UPDATE_SESSION:
      return _objectSpread(_objectSpread({}, state), {}, {
        session: _objectSpread({}, action.payload)
      });

    case _actions.UPDATE_TYPING:
      return _objectSpread(_objectSpread({}, state), {}, {
        typing: action.payload
      });

    case _actions.UPDATE_THEME:
      return _objectSpread(_objectSpread({}, state), action.payload);

    case _actions.UPDATE_HANDOFF:
      return _objectSpread(_objectSpread({}, state), {}, {
        handoff: action.payload
      });

    case _actions.TOGGLE_WEBCHAT:
      return _objectSpread(_objectSpread({}, state), {}, {
        isWebchatOpen: action.payload
      });

    case _actions.TOGGLE_EMOJI_PICKER:
      return _objectSpread(_objectSpread({}, state), {}, {
        isEmojiPickerOpen: action.payload
      });

    case _actions.TOGGLE_PERSISTENT_MENU:
      return _objectSpread(_objectSpread({}, state), {}, {
        isPersistentMenuOpen: action.payload
      });

    case _actions.TOGGLE_COVER_COMPONENT:
      return _objectSpread(_objectSpread({}, state), {}, {
        isCoverComponentOpen: action.payload
      });

    case _actions.DO_RENDER_CUSTOM_COMPONENT:
      return _objectSpread(_objectSpread({}, state), {}, {
        isCustomComponentRendered: action.payload
      });

    case _actions.SET_ERROR:
      return _objectSpread(_objectSpread({}, state), {}, {
        error: action.payload || {}
      });

    case _actions.SET_ONLINE:
      return _objectSpread(_objectSpread({}, state), {}, {
        online: action.payload
      });

    case _actions.UPDATE_DEV_SETTINGS:
      return _objectSpread(_objectSpread({}, state), {}, {
        devSettings: _objectSpread({}, action.payload)
      });

    case _actions.UPDATE_LATEST_INPUT:
      return _objectSpread(_objectSpread({}, state), {}, {
        latestInput: action.payload
      });

    case _actions.UPDATE_LAST_ROUTE_PATH:
      return _objectSpread(_objectSpread({}, state), {}, {
        lastRoutePath: action.payload
      });

    case _actions.SET_CURRENT_ATTACHMENT:
      return _objectSpread(_objectSpread({}, state), {}, {
        currentAttachment: action.payload
      });

    case _actions.UPDATE_JWT:
      return _objectSpread(_objectSpread({}, state), {}, {
        jwt: action.payload
      });

    default:
      return (0, _messagesReducer.messagesReducer)(state, action);
  }
}
//# sourceMappingURL=webchat-reducer.js.map