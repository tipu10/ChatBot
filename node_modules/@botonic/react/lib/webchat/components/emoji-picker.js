"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenedEmojiPicker = exports.EmojiPicker = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _emojiPickerReact = _interopRequireDefault(require("emoji-picker-react"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _emojiButton = _interopRequireDefault(require("../../assets/emojiButton.svg"));

var _constants = require("../../constants");

var _contexts = require("../../contexts");

var _conditionalAnimation = require("../components/conditional-animation");

var _hooks = require("../hooks");

var _common = require("./common");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var EmojiPicker = function EmojiPicker(_ref) {
  var enableEmojiPicker = _ref.enableEmojiPicker,
      onClick = _ref.onClick;

  var _useContext = (0, _react.useContext)(_contexts.WebchatContext),
      getThemeProperty = _useContext.getThemeProperty;

  var CustomEmojiPicker = getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.customEmojiPicker, undefined);

  var isEmojiPickerEnabled = function isEmojiPickerEnabled() {
    var _getThemeProperty;

    var hasCustomEmojiPicker = !!CustomEmojiPicker;
    return (_getThemeProperty = getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.enableEmojiPicker, enableEmojiPicker)) !== null && _getThemeProperty !== void 0 ? _getThemeProperty : hasCustomEmojiPicker;
  };

  var emojiPickerEnabled = isEmojiPickerEnabled();

  var handleClick = function handleClick(event) {
    onClick();
    event.stopPropagation();
  };

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, emojiPickerEnabled ? /*#__PURE__*/_react["default"].createElement(_conditionalAnimation.ConditionalAnimation, null, /*#__PURE__*/_react["default"].createElement("div", {
    role: _constants.ROLES.EMOJI_PICKER_ICON,
    onClick: handleClick
  }, CustomEmojiPicker ? /*#__PURE__*/_react["default"].createElement(CustomEmojiPicker, null) : /*#__PURE__*/_react["default"].createElement(_common.Icon, {
    src: _emojiButton["default"]
  }))) : null);
};

exports.EmojiPicker = EmojiPicker;

var Container = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: flex-end;\n  position: absolute;\n  right: 3px;\n  top: -324px;\n"])));

var OpenedEmojiPicker = function OpenedEmojiPicker(props) {
  var _useComponentVisible = (0, _hooks.useComponentVisible)(true, props.onClick),
      ref = _useComponentVisible.ref,
      isComponentVisible = _useComponentVisible.isComponentVisible;

  return /*#__PURE__*/_react["default"].createElement("div", {
    ref: ref
  }, isComponentVisible && /*#__PURE__*/_react["default"].createElement(Container, {
    role: _constants.ROLES.EMOJI_PICKER
  }, /*#__PURE__*/_react["default"].createElement(_emojiPickerReact["default"], {
    onEmojiClick: props.onEmojiClick,
    disableAutoFocus: true
  })));
};

exports.OpenedEmojiPicker = OpenedEmojiPicker;
//# sourceMappingURL=emoji-picker.js.map