{"version":3,"sources":["../../../src/webchat/components/emoji-picker.jsx"],"names":["EmojiPicker","enableEmojiPicker","onClick","WebchatContext","getThemeProperty","CustomEmojiPicker","WEBCHAT","CUSTOM_PROPERTIES","customEmojiPicker","undefined","isEmojiPickerEnabled","hasCustomEmojiPicker","emojiPickerEnabled","handleClick","event","stopPropagation","ROLES","EMOJI_PICKER_ICON","LogoEmoji","Container","styled","div","OpenedEmojiPicker","props","ref","isComponentVisible","EMOJI_PICKER","onEmojiClick"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEO,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAAoC;AAAA,MAAjCC,iBAAiC,QAAjCA,iBAAiC;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAC7D,oBAA6B,uBAAWC,wBAAX,CAA7B;AAAA,MAAQC,gBAAR,eAAQA,gBAAR;;AAEA,MAAMC,iBAAiB,GAAGD,gBAAgB,CACxCE,mBAAQC,iBAAR,CAA0BC,iBADc,EAExCC,SAFwC,CAA1C;;AAKA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAAA;;AACjC,QAAMC,oBAAoB,GAAG,CAAC,CAACN,iBAA/B;AACA,gCACED,gBAAgB,CACdE,mBAAQC,iBAAR,CAA0BN,iBADZ,EAEdA,iBAFc,CADlB,iEAIOU,oBAJP;AAMD,GARD;;AASA,MAAMC,kBAAkB,GAAGF,oBAAoB,EAA/C;;AAEA,MAAMG,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAC3BZ,IAAAA,OAAO;AACPY,IAAAA,KAAK,CAACC,eAAN;AACD,GAHD;;AAKA,sBACE,kEACGH,kBAAkB,gBACjB,gCAAC,0CAAD,qBACE;AAAK,IAAA,IAAI,EAAEI,iBAAMC,iBAAjB;AAAoC,IAAA,OAAO,EAAEJ;AAA7C,KACGR,iBAAiB,gBAChB,gCAAC,iBAAD,OADgB,gBAGhB,gCAAC,YAAD;AAAM,IAAA,GAAG,EAAEa;AAAX,IAJJ,CADF,CADiB,GAUf,IAXN,CADF;AAeD,CAvCM;;;;AAyCP,IAAMC,SAAS,GAAGC,6BAAOC,GAAV,8LAAf;;AAQO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK,EAAI;AACxC,6BAAoC,gCAAoB,IAApB,EAA0BA,KAAK,CAACrB,OAAhC,CAApC;AAAA,MAAQsB,GAAR,wBAAQA,GAAR;AAAA,MAAaC,kBAAb,wBAAaA,kBAAb;;AACA,sBACE;AAAK,IAAA,GAAG,EAAED;AAAV,KACGC,kBAAkB,iBACjB,gCAAC,SAAD;AAAW,IAAA,IAAI,EAAET,iBAAMU;AAAvB,kBACE,gCAAC,4BAAD;AAAQ,IAAA,YAAY,EAAEH,KAAK,CAACI,YAA5B;AAA0C,IAAA,gBAAgB,EAAE;AAA5D,IADF,CAFJ,CADF;AASD,CAXM","sourcesContent":["import Picker from 'emoji-picker-react'\nimport React, { useContext } from 'react'\nimport styled from 'styled-components'\n\nimport LogoEmoji from '../../assets/emojiButton.svg'\nimport { ROLES, WEBCHAT } from '../../constants'\nimport { WebchatContext } from '../../contexts'\nimport { ConditionalAnimation } from '../components/conditional-animation'\nimport { useComponentVisible } from '../hooks'\nimport { Icon } from './common'\n\nexport const EmojiPicker = ({ enableEmojiPicker, onClick }) => {\n  const { getThemeProperty } = useContext(WebchatContext)\n\n  const CustomEmojiPicker = getThemeProperty(\n    WEBCHAT.CUSTOM_PROPERTIES.customEmojiPicker,\n    undefined\n  )\n\n  const isEmojiPickerEnabled = () => {\n    const hasCustomEmojiPicker = !!CustomEmojiPicker\n    return (\n      getThemeProperty(\n        WEBCHAT.CUSTOM_PROPERTIES.enableEmojiPicker,\n        enableEmojiPicker\n      ) ?? hasCustomEmojiPicker\n    )\n  }\n  const emojiPickerEnabled = isEmojiPickerEnabled()\n\n  const handleClick = event => {\n    onClick()\n    event.stopPropagation()\n  }\n\n  return (\n    <>\n      {emojiPickerEnabled ? (\n        <ConditionalAnimation>\n          <div role={ROLES.EMOJI_PICKER_ICON} onClick={handleClick}>\n            {CustomEmojiPicker ? (\n              <CustomEmojiPicker />\n            ) : (\n              <Icon src={LogoEmoji} />\n            )}\n          </div>\n        </ConditionalAnimation>\n      ) : null}\n    </>\n  )\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  position: absolute;\n  right: 3px;\n  top: -324px;\n`\n\nexport const OpenedEmojiPicker = props => {\n  const { ref, isComponentVisible } = useComponentVisible(true, props.onClick)\n  return (\n    <div ref={ref}>\n      {isComponentVisible && (\n        <Container role={ROLES.EMOJI_PICKER}>\n          <Picker onEmojiClick={props.onEmojiClick} disableAutoFocus={true} />\n        </Container>\n      )}\n    </div>\n  )\n}\n"],"file":"emoji-picker.js"}