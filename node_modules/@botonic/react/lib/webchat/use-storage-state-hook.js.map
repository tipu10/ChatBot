{"version":3,"sources":["../../src/webchat/use-storage-state-hook.js"],"names":["evtTarget","EventTarget","useStorageState","storage","key","defaultValue","raw","getItem","JSON","parse","value","setValue","updater","updatedValue","remove","stringify","dispatchEvent","CustomEvent","detail","listener","lraw","addEventListener","removeEventListener","undefined"],"mappings":";;;;;;;;;;;AAAA;;AAEA;AACA,IAAMA,SAAS,GAAG,IAAIC,WAAJ,EAAlB;;AAEO,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,GAAlC,EAAuCC,YAAvC,EAAqD;AAC1D,MAAMC,GAAG,GAAGH,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEI,OAAT,CAAiBH,GAAjB,CAAZ;;AAEA,kBAA0B,qBAASE,GAAG,GAAGE,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAH,GAAqBD,YAAjC,CAA1B;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,OAAO,GAAG,wBACd,UAACC,YAAD,EAAkC;AAAA,QAAnBC,MAAmB,uEAAV,KAAU;AAChCH,IAAAA,QAAQ,CAACE,YAAD,CAAR;AACAV,IAAAA,OAAO,CAACW,MAAM,GAAG,YAAH,GAAkB,SAAzB,CAAP,CACEV,GADF,EAEEI,IAAI,CAACO,SAAL,CAAeF,YAAf,CAFF;AAIAb,IAAAA,SAAS,CAACgB,aAAV,CACE,IAAIC,WAAJ,CAAgB,gBAAhB,EAAkC;AAAEC,MAAAA,MAAM,EAAE;AAAEd,QAAAA,GAAG,EAAHA;AAAF;AAAV,KAAlC,CADF;AAGD,GAVa,EAWd,CAACA,GAAD,CAXc,CAAhB;AAcAC,EAAAA,YAAY,IAAI,IAAhB,IAAwB,CAACC,GAAzB,IAAgCM,OAAO,CAACP,YAAD,CAAvC;AAEA,wBAAU,YAAM;AACd,QAAMc,QAAQ,GAAG,SAAXA,QAAW,OAAgB;AAAA,UAAbD,MAAa,QAAbA,MAAa;;AAC/B,UAAIA,MAAM,CAACd,GAAP,KAAeA,GAAnB,EAAwB;AACtB,YAAMgB,IAAI,GAAGjB,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEI,OAAT,CAAiBH,GAAjB,CAAb;AAEAgB,QAAAA,IAAI,KAAKd,GAAT,IAAgBK,QAAQ,CAACH,IAAI,CAACC,KAAL,CAAWW,IAAX,CAAD,CAAxB;AACD;AACF,KAND;;AAQApB,IAAAA,SAAS,CAACqB,gBAAV,CAA2B,gBAA3B,EAA6CF,QAA7C;AACA,WAAO;AAAA,aAAMnB,SAAS,CAACsB,mBAAV,CAA8B,gBAA9B,EAAgDH,QAAhD,CAAN;AAAA,KAAP;AACD,GAXD;;AAaA,MAAIhB,OAAO,KAAK,IAAhB,EAAsB;AACpB,WAAO,CAACoB,SAAD,EAAYA,SAAZ,CAAP;AACD;;AACD,SAAO,CAACb,KAAD,EAAQE,OAAR,EAAiB;AAAA,WAAMA,OAAO,CAAC,IAAD,EAAO,IAAP,CAAb;AAAA,GAAjB,CAAP;AACD","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\n//Code taken from https://github.com/leny/react-use-storage\nconst evtTarget = new EventTarget()\n\nexport function useStorageState(storage, key, defaultValue) {\n  const raw = storage?.getItem(key)\n\n  const [value, setValue] = useState(raw ? JSON.parse(raw) : defaultValue)\n\n  const updater = useCallback(\n    (updatedValue, remove = false) => {\n      setValue(updatedValue)\n      storage[remove ? 'removeItem' : 'setItem'](\n        key,\n        JSON.stringify(updatedValue)\n      )\n      evtTarget.dispatchEvent(\n        new CustomEvent('storage_change', { detail: { key } })\n      )\n    },\n    [key]\n  )\n\n  defaultValue != null && !raw && updater(defaultValue)\n\n  useEffect(() => {\n    const listener = ({ detail }) => {\n      if (detail.key === key) {\n        const lraw = storage?.getItem(key)\n\n        lraw !== raw && setValue(JSON.parse(lraw))\n      }\n    }\n\n    evtTarget.addEventListener('storage_change', listener)\n    return () => evtTarget.removeEventListener('storage_change', listener)\n  })\n\n  if (storage === null) {\n    return [undefined, undefined]\n  }\n  return [value, updater, () => updater(null, true)]\n}\n"],"file":"use-storage-state-hook.js"}