"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebchatMessageList = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _Fade = _interopRequireDefault(require("react-reveal/Fade"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("../constants");

var _contexts = require("../contexts");

var _environment = require("../util/environment");

var _react2 = require("../util/react");

var _styledScrollbar = require("./components/styled-scrollbar");

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var StyledMessages = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  overflow-x: hidden;\n  flex-direction: column;\n  flex: none;\n  white-space: pre;\n  word-wrap: break-word;\n"])));

var DefaultIntroImage = _styledComponents["default"].img(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  max-height: 50%;\n  width: 100%;\n"])));

var WebchatMessageList = function WebchatMessageList(props) {
  var _useContext = (0, _react.useContext)(_contexts.WebchatContext),
      webchatState = _useContext.webchatState,
      getThemeProperty = _useContext.getThemeProperty;

  var animationsEnabled = getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.enableAnimations, true);
  var CustomIntro = getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.customIntro);
  var introImage = getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.introImage);
  var introStyle = getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.introStyle);

  var scrollbarOptions = _objectSpread(_objectSpread({}, {
    enable: true,
    autoHide: true
  }), getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.scrollbar));

  var DefaultIntro = introImage && /*#__PURE__*/_react["default"].createElement(DefaultIntroImage, {
    style: _objectSpread({}, introStyle),
    src: (0, _environment.resolveImage)(introImage)
  });

  return /*#__PURE__*/_react["default"].createElement(_styledScrollbar.StyledScrollbar, {
    role: _constants.ROLES.MESSAGE_LIST // TODO: Distinguis between multiple instances of webchat, e.g. `${uniqueId}-botonic-scrollable`
    ,
    id: "botonic-scrollable-content",
    scrollbar: scrollbarOptions,
    autoHide: scrollbarOptions.autoHide,
    ismessagescontainer: "true",
    style: _objectSpread({}, props.style)
  }, (CustomIntro || DefaultIntro) && /*#__PURE__*/_react["default"].createElement(_react2.ConditionalWrapper, {
    condition: animationsEnabled,
    wrapper: function wrapper(children) {
      return /*#__PURE__*/_react["default"].createElement(_Fade["default"], null, children);
    }
  }, CustomIntro ? /*#__PURE__*/_react["default"].createElement(CustomIntro, null) : DefaultIntro), webchatState.messagesComponents.map(function (e, i) {
    return /*#__PURE__*/_react["default"].createElement(StyledMessages, {
      role: _constants.ROLES.MESSAGE,
      key: i
    }, e);
  }), props.children);
};

exports.WebchatMessageList = WebchatMessageList;
//# sourceMappingURL=message-list.js.map