"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useStorageState = useStorageState;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

//Code taken from https://github.com/leny/react-use-storage
var evtTarget = new EventTarget();

function useStorageState(storage, key, defaultValue) {
  var raw = storage === null || storage === void 0 ? void 0 : storage.getItem(key);

  var _useState = (0, _react.useState)(raw ? JSON.parse(raw) : defaultValue),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var updater = (0, _react.useCallback)(function (updatedValue) {
    var remove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    setValue(updatedValue);
    storage[remove ? 'removeItem' : 'setItem'](key, JSON.stringify(updatedValue));
    evtTarget.dispatchEvent(new CustomEvent('storage_change', {
      detail: {
        key: key
      }
    }));
  }, [key]);
  defaultValue != null && !raw && updater(defaultValue);
  (0, _react.useEffect)(function () {
    var listener = function listener(_ref) {
      var detail = _ref.detail;

      if (detail.key === key) {
        var lraw = storage === null || storage === void 0 ? void 0 : storage.getItem(key);
        lraw !== raw && setValue(JSON.parse(lraw));
      }
    };

    evtTarget.addEventListener('storage_change', listener);
    return function () {
      return evtTarget.removeEventListener('storage_change', listener);
    };
  });

  if (storage === null) {
    return [undefined, undefined];
  }

  return [value, updater, function () {
    return updater(null, true);
  }];
}
//# sourceMappingURL=use-storage-state-hook.js.map