"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.msgToBotonic = msgToBotonic;
exports.msgsToBotonic = msgsToBotonic;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _messageUtils = require("../src/message-utils");

var _audio = require("./components/audio");

var _button = require("./components/button");

var _buttonsDisabler = require("./components/buttons-disabler");

var _carousel = require("./components/carousel");

var _document = require("./components/document");

var _element = require("./components/element");

var _image = require("./components/image");

var _location = require("./components/location");

var _pic = require("./components/pic");

var _reply = require("./components/reply");

var _subtitle = require("./components/subtitle");

var _text = require("./components/text");

var _title = require("./components/title");

var _video = require("./components/video");

/**
 *
 * @param msg {object}
 * @param customMessageTypes {{customTypeName}[]?}
 * @return {React.ReactNode}
 */
function msgToBotonic(msg, customMessageTypes) {
  delete msg.display;

  if ((0, _messageUtils.isCustom)(msg)) {
    try {
      return customMessageTypes.find(function (mt) {
        return mt.customTypeName === msg.data.customTypeName;
      }).deserialize(msg);
    } catch (e) {
      console.log(e);
    }
  } else if ((0, _messageUtils.isText)(msg)) {
    return textToBotonic(msg);
  } else if ((0, _messageUtils.isCarousel)(msg)) {
    var elements = msg.elements || msg.data.elements;
    return /*#__PURE__*/_react["default"].createElement(_carousel.Carousel, (0, _extends2["default"])({}, msg, {
      key: msg.key
    }), elementsParse(elements));
  } else if ((0, _messageUtils.isImage)(msg)) {
    return /*#__PURE__*/_react["default"].createElement(_image.Image, (0, _extends2["default"])({
      key: msg.key
    }, msg, {
      src: msg.data.image != undefined ? msg.data.image : msg.data
    }));
  } else if ((0, _messageUtils.isVideo)(msg)) {
    return /*#__PURE__*/_react["default"].createElement(_video.Video, (0, _extends2["default"])({}, msg, {
      src: msg.data.video != undefined ? msg.data.video : msg.data
    }));
  } else if ((0, _messageUtils.isAudio)(msg)) {
    return /*#__PURE__*/_react["default"].createElement(_audio.Audio, (0, _extends2["default"])({}, msg, {
      src: msg.data.audio != undefined ? msg.data.audio : msg.data
    }));
  } else if ((0, _messageUtils.isDocument)(msg)) {
    return /*#__PURE__*/_react["default"].createElement(_document.Document, (0, _extends2["default"])({}, msg, {
      src: msg.data.document != undefined ? msg.data.document : msg.data
    }));
  } else if ((0, _messageUtils.isLocation)(msg)) {
    var lat = msg.data ? msg.data.location.lat : msg.latitude;

    var _long = msg.data ? msg.data.location["long"] : msg.longitude;

    return /*#__PURE__*/_react["default"].createElement(_location.Location, (0, _extends2["default"])({}, msg, {
      lat: lat,
      "long": _long
    }));
  } else if ((0, _messageUtils.isButtonMessage)(msg)) {
    var buttons = buttonsParse(msg.buttons);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_text.Text, msg, msg.text, buttons));
  }

  console.warn("Not converting message of type ".concat(msg.type));
  return null;
}

function rndStr() {
  return Math.random().toString();
}
/**
 * @param msgs {object|object[]}
 * @param customMessageTypes {{customTypeName}[]?}
 * @return {React.ReactNode}
 */


function msgsToBotonic(msgs, customMessageTypes) {
  if (Array.isArray(msgs)) {
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, msgs.map(function (msg, i) {
      if (msg.key == null) {
        msg.key = "msg".concat(i);
      }

      return msgToBotonic(msg, customMessageTypes);
    }));
  }

  return msgToBotonic(msgs, customMessageTypes);
}

function textToBotonic(msg) {
  var txt = msg.data && msg.data.text != undefined ? msg.data.text : String(msg.data);
  if (msg.replies && msg.replies.length || msg.keyboard && msg.keyboard.length) return /*#__PURE__*/_react["default"].createElement(_text.Text, (0, _extends2["default"])({}, msg, {
    key: msg.key
  }), txt, quickrepliesParse(msg));
  if (msg.buttons && msg.buttons.length) return /*#__PURE__*/_react["default"].createElement(_text.Text, (0, _extends2["default"])({}, msg, {
    key: msg.key
  }), txt, buttonsParse(msg.buttons));
  return /*#__PURE__*/_react["default"].createElement(_text.Text, (0, _extends2["default"])({}, msg, {
    key: msg.key
  }), txt);
}

function elementsParse(elements) {
  return elements.map(function (e, i) {
    return /*#__PURE__*/_react["default"].createElement(_element.Element, {
      key: i
    }, /*#__PURE__*/_react["default"].createElement(_pic.Pic, {
      src: e.img || e.pic || e.image_url
    }), /*#__PURE__*/_react["default"].createElement(_title.Title, null, e.title), /*#__PURE__*/_react["default"].createElement(_subtitle.Subtitle, null, e.subtitle), buttonsParse(e.button || e.buttons));
  });
}

function buttonsParse(buttons) {
  return buttons.map(function (b, i) {
    var props = b.props || b;
    var payload = props.payload;
    if (props.path) payload = "__PATH_PAYLOAD__".concat(props.path);
    var url = props.messenger_extensions ? null : props.url;
    var target = props.messenger_extensions ? null : props.target;
    var title = props.title;
    var webview = props.messenger_extensions ? props.url : props.webview;

    var disabledProps = _buttonsDisabler.ButtonsDisabler.constructBrowserProps(props);

    return /*#__PURE__*/_react["default"].createElement(_button.Button, (0, _extends2["default"])({
      key: i,
      payload: payload,
      url: url,
      target: target,
      webview: webview
    }, disabledProps), title);
  });
}

function quickrepliesParse(msg) {
  var replies = null;

  if (msg.replies) {
    replies = msg.replies.map(function (el, i) {
      var payload = el.payload;
      if (el.path) payload = "__PATH_PAYLOAD__".concat(el.path);
      return /*#__PURE__*/_react["default"].createElement(_reply.Reply, {
        key: i,
        payload: payload
      }, el.text);
    });
  }

  if (msg.keyboard) {
    replies = msg.keyboard.map(function (el, i) {
      return /*#__PURE__*/_react["default"].createElement(_reply.Reply, {
        key: i,
        payload: el.data
      }, el.label);
    });
  }

  return replies;
}
//# sourceMappingURL=msg-to-botonic.js.map