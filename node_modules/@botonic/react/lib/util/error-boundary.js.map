{"version":3,"sources":["../../src/util/error-boundary.jsx"],"names":["createErrorBoundary","errorComponent","props","ErrorBoundary","state","error","errorInfo","console","errorMessage","message","children","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,GAExB;AAAA,iFAAP,EAAO;AAAA,iCADTC,cACS;AAAA,MADTA,cACS,oCADQ,UAAAC,KAAK;AAAA,wBAAI,gCAAC,UAAD,0CAAJ;AAAA,GACb;;AAAA,MACHC,aADG;AAAA;;AAAA;;AAEP,2BAAYD,KAAZ,EAAmB;AAAA;;AAAA;AACjB,gCAAMA,KAAN;AACA,YAAKE,KAAL,GAAa;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAFiB;AAGlB;AAED;AACJ;AACA;AACA;;;AAVW;AAAA;AAAA,aAWP,2BAAkBA,KAAlB,EAAyBC,SAAzB,EAAoC;AAClC;AACA;AACA,YAAI,mBAAJ,EAAc;AACZ;AACAC,UAAAA,OAAO,CAACF,KAAR,gBAA6BA,KAA7B;AACD;AACF;AAlBM;AAAA;AAAA,aAwBP,kBAAS;AACP,YAAI,KAAKD,KAAL,CAAWC,KAAf,EAAsB;AACpB,iBAAOJ,cAAc,iCAChB,KAAKC,KADW;AAEnBM,YAAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWC,KAAX,CAAiBI;AAFZ,aAArB;AAID,SALD,MAKO;AACL,iBAAO,KAAKP,KAAL,CAAWQ,QAAlB;AACD;AACF;AAjCM;AAAA;AAAA,aAoBP,kCAAgCL,KAAhC,EAAuC;AACrC,eAAO;AAAEA,UAAAA,KAAK,EAALA;AAAF,SAAP;AACD;AAtBM;AAAA;AAAA,IACmBM,kBAAMC,SADzB;;AAoCT,SAAOT,aAAP;AACD,CAvCM","sourcesContent":["import { isNode } from '@botonic/core'\nimport React from 'react'\n\nimport { Text } from '../components/text'\n\n/**\n * Replaces crashed children with the provided fallback component.\n * https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\n * See alternative at https://stackoverflow.com/a/60255291/145289\n */\nexport const createErrorBoundary = ({\n  errorComponent = props => <Text>The message cannot be displayed</Text>,\n} = {}) => {\n  class ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = { error: null }\n    }\n\n    /**\n     * @param error the exception which was trown\n     * @param errorInfo the stack of component names at the error\n     */\n    componentDidCatch(error, errorInfo) {\n      // No need to log the error because at least chrome & firefox already show\n      // both component and call stacks\n      if (isNode()) {\n        // In node, only the component stack is displayed\n        console.error(`Failure at:`, error)\n      }\n    }\n\n    static getDerivedStateFromError(error) {\n      return { error }\n    }\n\n    render() {\n      if (this.state.error) {\n        return errorComponent({\n          ...this.props,\n          errorMessage: this.state.error.message,\n        })\n      } else {\n        return this.props.children\n      }\n    }\n  }\n\n  return ErrorBoundary\n}\n"],"file":"error-boundary.js"}