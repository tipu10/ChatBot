"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scrollToBottom = exports.onDOMLoaded = exports.isShadowDOMSupported = exports.getWebchatElement = exports.getScrollableContent = exports.getScrollableArea = void 0;

var _constants = require("../constants");

var getScrollableContent = function getScrollableContent(webchatElement) {
  return webchatElement.querySelector(_constants.WEBCHAT.SELECTORS.SCROLLABLE_CONTENT);
};

exports.getScrollableContent = getScrollableContent;

var getScrollableArea = function getScrollableArea(webchatElement) {
  var getArea = function getArea(area) {
    var botonicScrollableContent = getScrollableContent(webchatElement);
    var scrollableArea = botonicScrollableContent && botonicScrollableContent.querySelector(area);
    return scrollableArea;
  };

  return {
    full: getArea(_constants.WEBCHAT.SELECTORS.SIMPLEBAR_CONTENT),
    visible: getArea(_constants.WEBCHAT.SELECTORS.SIMPLEBAR_WRAPPER)
  };
};

exports.getScrollableArea = getScrollableArea;

var scrollToBottom = function scrollToBottom() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === void 0 ? 200 : _ref$timeout,
      _ref$behavior = _ref.behavior,
      behavior = _ref$behavior === void 0 ? 'smooth' : _ref$behavior,
      host = _ref.host;

  var webchatElement = getWebchatElement(host);
  if (!webchatElement) return;
  var frame = getScrollableArea(webchatElement).visible;

  if (frame) {
    setTimeout(function () {
      return frame.scrollTo({
        top: frame.scrollHeight,
        behavior: behavior
      });
    }, timeout);
  }
};

exports.scrollToBottom = scrollToBottom;

var getWebchatElement = function getWebchatElement(host) {
  return host && host.querySelector("#".concat(_constants.WEBCHAT.DEFAULTS.ID));
}; // https://stackoverflow.com/questions/9457891/how-to-detect-if-domcontentloaded-was-fired


exports.getWebchatElement = getWebchatElement;

var onDOMLoaded = function onDOMLoaded(callback) {
  if (/complete|interactive|loaded/.test(document.readyState)) {
    // In case the document has finished parsing, document's readyState will
    // be one of "complete", "interactive" or (non-standard) "loaded".
    callback();
  } else {
    // The document is not ready yet, so wait for the DOMContentLoaded event
    document.addEventListener('DOMContentLoaded', callback, false);
  }
};

exports.onDOMLoaded = onDOMLoaded;

var isShadowDOMSupported = function isShadowDOMSupported() {
  try {
    return document.head.createShadowRoot || document.head.attachShadow;
  } catch (e) {
    return false;
  }
};

exports.isShadowDOMSupported = isShadowDOMSupported;
//# sourceMappingURL=dom.js.map