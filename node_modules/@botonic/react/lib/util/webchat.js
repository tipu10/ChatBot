"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shouldKeepSessionOnReload = exports.initSession = exports.getServerErrorMessage = exports.createUser = exports._getThemeProperty = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = _interopRequireDefault(require("lodash.merge"));

var _uaParserJs = _interopRequireDefault(require("ua-parser-js"));

var _uuid = require("uuid");

var _constants = require("../constants");

var _objects = require("./objects");

/**
 * Returns the value of a property defined in bot's theme based on WEBCHAT.CUSTOM_PROPERTIES dictionary.
 * It gives preference to nested defined properties (e.g.: header.style) over plain properties (e.g.: headerStyle).
 * If property doesn't exist, returns the defaultValue.
 */
var _getThemeProperty = function _getThemeProperty(theme) {
  return function (property) {
    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    for (var _i = 0, _Object$entries = Object.entries(_constants.WEBCHAT.CUSTOM_PROPERTIES); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
          k = _Object$entries$_i[0],
          v = _Object$entries$_i[1];

      if (v == property) {
        var nestedProperty = (0, _objects.getProperty)(theme, v);
        if (nestedProperty !== undefined) return nestedProperty;
        var plainProperty = (0, _objects.getProperty)(theme, k);
        if (plainProperty !== undefined) return plainProperty;
        return defaultValue;
      }
    }

    return undefined;
  };
};

exports._getThemeProperty = _getThemeProperty;

var createUser = function createUser() {
  var parser = new _uaParserJs["default"]();
  var ua = parser.getResult();
  var name = "".concat(ua.os.name, " ").concat(ua.browser.name);
  if (ua.device && ua.device.type) name = "".concat(ua.device.type, " ").concat(name);
  return {
    id: (0, _uuid.v4)(),
    name: name
  };
};

exports.createUser = createUser;

var initSession = function initSession(session) {
  if (!session) session = {};
  var hasUserId = session.user && session.user.id !== undefined;
  if (!session.user || Object.keys(session.user).length === 0 || !hasUserId) session.user = !hasUserId ? (0, _lodash["default"])(session.user, createUser()) : createUser();
  return session;
};

exports.initSession = initSession;

var shouldKeepSessionOnReload = function shouldKeepSessionOnReload(_ref) {
  var initialDevSettings = _ref.initialDevSettings,
      devSettings = _ref.devSettings;
  return !initialDevSettings || devSettings && devSettings.keepSessionOnReload;
};

exports.shouldKeepSessionOnReload = shouldKeepSessionOnReload;

var getServerErrorMessage = function getServerErrorMessage(serverConfig) {
  if (!serverConfig || !serverConfig.errorMessage) return 'Connection issues';

  if (typeof serverConfig.errorMessage === 'function') {
    return serverConfig.errorMessage();
  }

  return serverConfig.errorMessage;
};

exports.getServerErrorMessage = getServerErrorMessage;
//# sourceMappingURL=webchat.js.map