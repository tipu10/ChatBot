"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapObjectNonBooleanValues = exports.hasComplexChildren = exports.deepMapWithIndex = exports.ConditionalWrapper = void 0;
exports.renderComponent = renderComponent;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _core = require("@botonic/core");

var _react = require("react");

var _objects = require("./objects");

var ConditionalWrapper = function ConditionalWrapper(_ref) {
  var condition = _ref.condition,
      wrapper = _ref.wrapper,
      children = _ref.children;
  return condition ? wrapper(children) : children;
};

exports.ConditionalWrapper = ConditionalWrapper;

function renderComponent(_ref2) {
  var renderBrowser = _ref2.renderBrowser,
      renderNode = _ref2.renderNode;
  if ((0, _core.isBrowser)()) return renderBrowser();else if ((0, _core.isNode)()) return renderNode();
  throw new Error('Unexpected process type. Not recognized as browser nor node');
}

var mapObjectNonBooleanValues = function mapObjectNonBooleanValues(obj) {
  // to avoid React SSR warnings: https://github.com/styled-components/styled-components/issues/1198#issue-262022540
  return (0, _objects.mapObject)(obj, function (_ref3) {
    var _ref4 = (0, _slicedToArray2["default"])(_ref3, 2),
        key = _ref4[0],
        value = _ref4[1];

    if (typeof value === 'boolean') return [key, Number(value)];
    return [key, value];
  });
};

exports.mapObjectNonBooleanValues = mapObjectNonBooleanValues;

var hasChildren = function hasChildren(element) {
  return /*#__PURE__*/(0, _react.isValidElement)(element) && Boolean(element.props.children);
};

var hasComplexChildren = function hasComplexChildren(element) {
  return hasChildren(element) && _react.Children.toArray(element.props.children).reduce(function (response, child) {
    return response || /*#__PURE__*/(0, _react.isValidElement)(child);
  }, false);
};

exports.hasComplexChildren = hasComplexChildren;

var deepMapWithIndex = function deepMapWithIndex(children, deepMapFn) {
  return _react.Children.toArray(children).map(function (child, index) {
    if ( /*#__PURE__*/(0, _react.isValidElement)(child) && hasComplexChildren(child)) {
      // Clone the child that has children and map them too
      return deepMapFn( /*#__PURE__*/(0, _react.cloneElement)(child, Object.assign(Object.assign({}, child.props), {
        children: deepMapWithIndex(child.props.children, deepMapFn)
      })), index, children);
    }

    return deepMapFn(child, index, children);
  });
};

exports.deepMapWithIndex = deepMapWithIndex;
//# sourceMappingURL=react.js.map