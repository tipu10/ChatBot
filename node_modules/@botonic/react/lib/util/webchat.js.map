{"version":3,"sources":["../../src/util/webchat.js"],"names":["_getThemeProperty","theme","property","defaultValue","undefined","Object","entries","WEBCHAT","CUSTOM_PROPERTIES","k","v","nestedProperty","plainProperty","createUser","parser","UAParser","ua","getResult","name","os","browser","device","type","id","initSession","session","hasUserId","user","keys","length","shouldKeepSessionOnReload","initialDevSettings","devSettings","keepSessionOnReload","getServerErrorMessage","serverConfig","errorMessage"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK;AAAA,SAAI,UACxCC,QADwC,EAGrC;AAAA,QADHC,YACG,uEADYC,SACZ;;AACH,uCAAqBC,MAAM,CAACC,OAAP,CAAeC,mBAAQC,iBAAvB,CAArB,qCAAgE;AAA3D;AAAA,UAAOC,CAAP;AAAA,UAAUC,CAAV;;AACH,UAAIA,CAAC,IAAIR,QAAT,EAAmB;AACjB,YAAMS,cAAc,GAAG,0BAAYV,KAAZ,EAAmBS,CAAnB,CAAvB;AACA,YAAIC,cAAc,KAAKP,SAAvB,EAAkC,OAAOO,cAAP;AAClC,YAAMC,aAAa,GAAG,0BAAYX,KAAZ,EAAmBQ,CAAnB,CAAtB;AACA,YAAIG,aAAa,KAAKR,SAAtB,EAAiC,OAAOQ,aAAP;AACjC,eAAOT,YAAP;AACD;AACF;;AACD,WAAOC,SAAP;AACD,GAdqC;AAAA,CAA/B;;;;AAgBA,IAAMS,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9B,MAAMC,MAAM,GAAG,IAAIC,sBAAJ,EAAf;AACA,MAAMC,EAAE,GAAGF,MAAM,CAACG,SAAP,EAAX;AACA,MAAIC,IAAI,aAAMF,EAAE,CAACG,EAAH,CAAMD,IAAZ,cAAoBF,EAAE,CAACI,OAAH,CAAWF,IAA/B,CAAR;AACA,MAAIF,EAAE,CAACK,MAAH,IAAaL,EAAE,CAACK,MAAH,CAAUC,IAA3B,EAAiCJ,IAAI,aAAMF,EAAE,CAACK,MAAH,CAAUC,IAAhB,cAAwBJ,IAAxB,CAAJ;AACjC,SAAO;AACLK,IAAAA,EAAE,EAAE,eADC;AAELL,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CATM;;;;AAUA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAAAC,OAAO,EAAI;AACpC,MAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACd,MAAMC,SAAS,GAAGD,OAAO,CAACE,IAAR,IAAgBF,OAAO,CAACE,IAAR,CAAaJ,EAAb,KAAoBnB,SAAtD;AACA,MAAI,CAACqB,OAAO,CAACE,IAAT,IAAiBtB,MAAM,CAACuB,IAAP,CAAYH,OAAO,CAACE,IAApB,EAA0BE,MAA1B,KAAqC,CAAtD,IAA2D,CAACH,SAAhE,EACED,OAAO,CAACE,IAAR,GAAe,CAACD,SAAD,GAAa,wBAAMD,OAAO,CAACE,IAAd,EAAoBd,UAAU,EAA9B,CAAb,GAAiDA,UAAU,EAA1E;AACF,SAAOY,OAAP;AACD,CANM;;;;AAQA,IAAMK,yBAAyB,GAAG,SAA5BA,yBAA4B;AAAA,MACvCC,kBADuC,QACvCA,kBADuC;AAAA,MAEvCC,WAFuC,QAEvCA,WAFuC;AAAA,SAGnC,CAACD,kBAAD,IAAwBC,WAAW,IAAIA,WAAW,CAACC,mBAHhB;AAAA,CAAlC;;;;AAKA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,YAAY,EAAI;AACnD,MAAI,CAACA,YAAD,IAAiB,CAACA,YAAY,CAACC,YAAnC,EAAiD,OAAO,mBAAP;;AACjD,MAAI,OAAOD,YAAY,CAACC,YAApB,KAAqC,UAAzC,EAAqD;AACnD,WAAOD,YAAY,CAACC,YAAb,EAAP;AACD;;AACD,SAAOD,YAAY,CAACC,YAApB;AACD,CANM","sourcesContent":["import merge from 'lodash.merge'\nimport UAParser from 'ua-parser-js'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { WEBCHAT } from '../constants'\nimport { getProperty } from './objects'\n\n/**\n * Returns the value of a property defined in bot's theme based on WEBCHAT.CUSTOM_PROPERTIES dictionary.\n * It gives preference to nested defined properties (e.g.: header.style) over plain properties (e.g.: headerStyle).\n * If property doesn't exist, returns the defaultValue.\n */\nexport const _getThemeProperty = theme => (\n  property,\n  defaultValue = undefined\n) => {\n  for (const [k, v] of Object.entries(WEBCHAT.CUSTOM_PROPERTIES)) {\n    if (v == property) {\n      const nestedProperty = getProperty(theme, v)\n      if (nestedProperty !== undefined) return nestedProperty\n      const plainProperty = getProperty(theme, k)\n      if (plainProperty !== undefined) return plainProperty\n      return defaultValue\n    }\n  }\n  return undefined\n}\n\nexport const createUser = () => {\n  const parser = new UAParser()\n  const ua = parser.getResult()\n  let name = `${ua.os.name} ${ua.browser.name}`\n  if (ua.device && ua.device.type) name = `${ua.device.type} ${name}`\n  return {\n    id: uuidv4(),\n    name,\n  }\n}\nexport const initSession = session => {\n  if (!session) session = {}\n  const hasUserId = session.user && session.user.id !== undefined\n  if (!session.user || Object.keys(session.user).length === 0 || !hasUserId)\n    session.user = !hasUserId ? merge(session.user, createUser()) : createUser()\n  return session\n}\n\nexport const shouldKeepSessionOnReload = ({\n  initialDevSettings,\n  devSettings,\n}) => !initialDevSettings || (devSettings && devSettings.keepSessionOnReload)\n\nexport const getServerErrorMessage = serverConfig => {\n  if (!serverConfig || !serverConfig.errorMessage) return 'Connection issues'\n  if (typeof serverConfig.errorMessage === 'function') {\n    return serverConfig.errorMessage()\n  }\n  return serverConfig.errorMessage\n}\n"],"file":"webchat.js"}