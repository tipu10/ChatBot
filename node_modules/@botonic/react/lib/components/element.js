"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Element = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("../constants");

var _react2 = require("../util/react");

var _templateObject;

var ElementContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  width: ", "px;\n  margin-right: ", "px;\n  border-radius: 6px;\n  border: 1px solid ", ";\n  overflow: hidden;\n  justify-content: space-between;\n"])), _constants.WEBCHAT.DEFAULTS.ELEMENT_WIDTH, _constants.WEBCHAT.DEFAULTS.ELEMENT_MARGIN_RIGHT, _constants.COLORS.SEASHELL_WHITE);

var Element = function Element(props) {
  var renderBrowser = function renderBrowser() {
    return /*#__PURE__*/_react["default"].createElement(ElementContainer, null, props.children);
  };

  var renderNode = function renderNode() {
    return /*#__PURE__*/_react["default"].createElement("element", null, props.children);
  };

  return (0, _react2.renderComponent)({
    renderBrowser: renderBrowser,
    renderNode: renderNode
  });
};

exports.Element = Element;

Element.serialize = function (elementProps) {
  var element = Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2["default"])(elementProps.children.filter(function (c) {
    return c && c.type && c.type.name != 'Button';
  }).map(function (c) {
    return c.type.serialize && c.type.serialize(c.props);
  })))); // When we are serializer buttons from backend, we are receiving the data
  // as an array of buttons, so we have to keep robust with serve and deal with arrays

  element.buttons = (0, _toConsumableArray2["default"])(elementProps.children.filter(function (c) {
    if (c instanceof Array) return true;
    return c && c.type && c.type.name == 'Button';
  }).map(function (b) {
    if (b instanceof Array) {
      return b.map(function (bb) {
        return bb && bb.type && bb.type.serialize && bb.type.serialize(bb.props).button;
      });
    }

    return b && b.type && b.type.serialize && b.type.serialize(b.props).button;
  })); // When we have the buttons from backend, we have all buttons inside an array on the first position
  // of another array in element['buttons'] we want that element['buttons'] to be an array of buttons,
  // not an array of another array of buttons

  if (element.buttons[0] instanceof Array) element.buttons = element.buttons[0];
  return element;
};
//# sourceMappingURL=element.js.map