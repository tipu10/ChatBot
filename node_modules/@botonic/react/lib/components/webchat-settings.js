"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeWebchatSettings = exports.WebchatSettings = void 0;

var _core = require("@botonic/core");

var _react = _interopRequireWildcard(require("react"));

var _contexts = require("../contexts");

var _react2 = require("../util/react");

var _regexs = require("../util/regexs");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var WebchatSettings = function WebchatSettings(_ref) {
  var theme = _ref.theme,
      blockInputs = _ref.blockInputs,
      persistentMenu = _ref.persistentMenu,
      enableEmojiPicker = _ref.enableEmojiPicker,
      enableAttachments = _ref.enableAttachments,
      enableUserInput = _ref.enableUserInput,
      enableAnimations = _ref.enableAnimations;

  var renderBrowser = function renderBrowser() {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var _useContext = (0, _react.useContext)(_contexts.WebchatContext),
        updateWebchatDevSettings = _useContext.updateWebchatDevSettings;

    updateWebchatDevSettings({
      theme: theme,
      blockInputs: blockInputs,
      persistentMenu: persistentMenu,
      enableEmojiPicker: enableEmojiPicker,
      enableAttachments: enableAttachments,
      enableUserInput: enableUserInput,
      enableAnimations: enableAnimations
    });
    return null;
  };

  var renderNode = function renderNode() {
    var updatedTheme = normalizeWebchatSettings({
      theme: theme,
      blockInputs: blockInputs,
      persistentMenu: persistentMenu,
      enableEmojiPicker: enableEmojiPicker,
      enableAttachments: enableAttachments,
      enableUserInput: enableUserInput,
      enableAnimations: enableAnimations
    });
    return /*#__PURE__*/_react["default"].createElement("message", {
      type: _core.INPUT.WEBCHAT_SETTINGS,
      settings: (0, _regexs.stringifyWithRegexs)({
        theme: updatedTheme
      })
    });
  };

  return (0, _react2.renderComponent)({
    renderBrowser: renderBrowser,
    renderNode: renderNode
  });
};

exports.WebchatSettings = WebchatSettings;

var normalizeWebchatSettings = function normalizeWebchatSettings(settings) {
  var theme = settings.theme,
      blockInputs = settings.blockInputs,
      persistentMenu = settings.persistentMenu,
      enableEmojiPicker = settings.enableEmojiPicker,
      enableAttachments = settings.enableAttachments,
      enableUserInput = settings.enableUserInput,
      enableAnimations = settings.enableAnimations;
  if (!theme) theme = {};
  if (!theme.userInput) theme.userInput = {};
  if (!theme.animations) theme.animations = {};

  if (persistentMenu !== undefined) {
    if (!theme.userInput.persistentMenu) theme.userInput.persistentMenu = {};
    theme.userInput.persistentMenu = persistentMenu;
  }

  if (enableEmojiPicker !== undefined) {
    if (!theme.userInput.emojiPicker) theme.userInput.emojiPicker = {};
    theme.userInput.emojiPicker.enable = enableEmojiPicker;
  }

  if (enableAttachments !== undefined) {
    if (!theme.userInput.attachments) theme.userInput.attachments = {};
    theme.userInput.attachments.enable = enableAttachments;
  }

  if (enableUserInput !== undefined) {
    if (!theme.userInput.enable) theme.userInput.enable = {};
    theme.userInput.enable = enableUserInput;
  }

  if (enableAnimations !== undefined) {
    if (!theme.animations.enable) theme.animations.enable = {};
    theme.animations.enable = enableAnimations;
  }

  if (blockInputs !== undefined) theme.userInput.blockInputs = blockInputs;
  return theme;
};

exports.normalizeWebchatSettings = normalizeWebchatSettings;
//# sourceMappingURL=webchat-settings.js.map