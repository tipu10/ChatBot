{"version":3,"sources":["../../../src/components/multichannel/multichannel-utils.js"],"names":["MULTICHANNEL_WHATSAPP_PROPS","markdown","WHATSAPP_MAX_BUTTONS","WHATSAPP_MAX_BUTTON_CHARS","DEFAULT_WHATSAPP_MAX_BUTTON_SEPARATOR","isMultichannelButton","node","isNodeKind","isMultichannelReply","isButton","kind","type","name","elementHasUrl","element","props","url","elementHasPostback","payload","path","elementHasWebview","webview","buttonTypes","POSTBACK","URL","WEBVIEW","getButtonType","multichannelButton","undefined","getFilteredElements","filter","elements","n","push","getMultichannelButtons","getMultichannelReplies","isWhatsapp","context","session","user","provider","Providers","Messaging","WHATSAPP","isFacebook","FACEBOOK"],"mappings":"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","sourcesContent":["import { Providers } from '@botonic/core'\n\n/**\n *\n * Whatsapp does not support Markdown\n * (its markup syntax is different)\n */\nexport const MULTICHANNEL_WHATSAPP_PROPS = { markdown: false }\n\nexport const WHATSAPP_MAX_BUTTONS = 3\nexport const WHATSAPP_MAX_BUTTON_CHARS = 20\nexport const DEFAULT_WHATSAPP_MAX_BUTTON_SEPARATOR = 'More options:'\n\nexport function isMultichannelButton(node) {\n  return isNodeKind(node, 'MultichannelButton')\n}\n\nexport function isMultichannelReply(node) {\n  return isNodeKind(node, 'MultichannelReply')\n}\n\nexport function isButton(node) {\n  return isNodeKind(node, 'Button')\n}\n\nexport function isNodeKind(node, kind) {\n  return node.type && node.type.name == kind\n}\nexport function elementHasUrl(element) {\n  return element.props && element.props.url\n}\nexport function elementHasPostback(element) {\n  return (\n    (element.props && element.props.payload) ||\n    (element.props && element.props.path)\n  )\n}\nexport function elementHasWebview(element) {\n  return element.props && element.props.webview\n}\n\nexport const buttonTypes = {\n  POSTBACK: 'postback',\n  URL: 'url',\n  WEBVIEW: 'webview',\n}\n\nexport function getButtonType(multichannelButton) {\n  if (elementHasUrl(multichannelButton)) return buttonTypes.URL\n  if (elementHasPostback(multichannelButton)) return buttonTypes.POSTBACK\n  if (elementHasWebview(multichannelButton)) return buttonTypes.WEBVIEW\n\n  return undefined\n}\n\nexport function getFilteredElements(node, filter) {\n  const elements = []\n  for (const n of node) {\n    if (filter(n)) elements.push(n)\n  }\n  return elements\n}\n\nexport function getMultichannelButtons(node) {\n  return getFilteredElements(node, isMultichannelButton)\n}\n\nexport function getMultichannelReplies(node) {\n  return getFilteredElements(node, isMultichannelReply)\n}\n\nexport const isWhatsapp = context =>\n  context.session &&\n  context.session.user &&\n  context.session.user.provider == Providers.Messaging.WHATSAPP\n\nexport const isFacebook = context =>\n  context.session &&\n  context.session.user &&\n  context.session.user.provider == Providers.Messaging.FACEBOOK\n"],"file":"multichannel-utils.js"}