{"version":3,"sources":["../../../src/components/multichannel/multichannel.jsx"],"names":["Multichannel","props","requestContext","RequestContext","children","newChildren","child","type","name","COMPONENT_TYPE","TEXT","key","index","BUTTON","REPLY","text","messageSeparator","newline","CAROUSEL","carousel","map","c","MULTICHANNEL_WHATSAPP_PROPS","currentIndex","firstIndex","boldIndex","indexSeparator"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAMO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AACnC,MAAMC,cAAc,GAAG,uBAAWC,wBAAX,CAAvB;;AAEA,MAAI,CAAC,mCAAWD,cAAX,CAAD,IAA+B,CAAC,mCAAWA,cAAX,CAApC,EAAgE;AAC9D,WAAOD,KAAK,CAACG,QAAb;AACD;;AACD,MAAI,mCAAWF,cAAX,CAAJ,EAAgC;AAC9B,QAAMG,YAAW,GAAG,8BAAiBJ,KAAK,CAACG,QAAvB,EAAiC,UAAAE,KAAK,EAAI;AAC5D,UAAIA,KAAK,IAAIA,KAAK,CAACC,IAAf,IAAuBD,KAAK,CAACC,IAAN,CAAWC,IAAX,KAAoBC,0BAAeC,IAA9D,EAAoE;AAClE,4BACE,gCAAC,kCAAD,gCAAsBJ,KAAK,CAACL,KAA5B;AAAmC,UAAA,GAAG,EAAEK,KAAK,CAACK;AAA9C,YACGL,KAAK,CAACL,KAAN,CAAYG,QADf,CADF;AAKD;;AACD,aAAOE,KAAP;AACD,KATmB,CAApB;;AAUA,WAAOD,YAAP;AACD;;AAED,MAAIA,WAAW,GAAG,8BAAiBJ,KAAK,CAACG,QAAvB,EAAiC,UAACE,KAAD,EAAQM,KAAR,EAAkB;AACnE,QAAIN,KAAK,IAAIA,KAAK,CAACC,IAAf,IAAuBD,KAAK,CAACC,IAAN,CAAWC,IAAX,KAAoBC,0BAAeI,MAA9D,EAAsE;AACpE,0BACE,gCAAC,sCAAD,gCAAwBP,KAAK,CAACL,KAA9B;AAAqC,QAAA,GAAG,EAAEK,KAAK,CAACK;AAAhD,UACGL,KAAK,CAACL,KAAN,CAAYG,QADf,CADF;AAKD;;AACD,QAAIE,KAAK,IAAIA,KAAK,CAACC,IAAf,IAAuBD,KAAK,CAACC,IAAN,CAAWC,IAAX,KAAoBC,0BAAeK,KAA9D,EAAqE;AACnE,0BACE,gCAAC,oCAAD,gCAAuBR,KAAK,CAACL,KAA7B;AAAoC,QAAA,GAAG,EAAEK,KAAK,CAACK;AAA/C,UACGL,KAAK,CAACL,KAAN,CAAYG,QADf,CADF;AAKD;;AACD,QAAIE,KAAK,IAAIA,KAAK,CAACC,IAAf,IAAuBD,KAAK,CAACC,IAAN,CAAWC,IAAX,KAAoBC,0BAAeC,IAA9D,EAAoE;AAClE,0BACE,gCAAC,kCAAD,gCACMJ,KAAK,CAACL,KADZ,EAEMA,KAAK,CAACc,IAFZ;AAGE,QAAA,GAAG,EAAET,KAAK,CAACK;AAHb,SAIOV,KAAK,CAACe,gBAAN,IACHJ,KAAK,GAAG,CADL,IACU;AAAEK,QAAAA,OAAO,EAAEhB,KAAK,CAACe;AAAjB,OALjB,GAOGV,KAAK,CAACL,KAAN,CAAYG,QAPf,CADF;AAWD;;AACD,QAAIE,KAAK,IAAIA,KAAK,CAACC,IAAf,IAAuBD,KAAK,CAACC,IAAN,CAAWC,IAAX,KAAoBC,0BAAeS,QAA9D,EAAwE;AACtE,0BACE,gCAAC,0CAAD,gCACMZ,KAAK,CAACL,KADZ,EAEMA,KAAK,CAACkB,QAFZ;AAGE,QAAA,GAAG,EAAEb,KAAK,CAACK;AAHb,UAKGL,KAAK,CAACL,KAAN,CAAYG,QALf,CADF;AASD;;AACD,WAAOE,KAAP;AACD,GAxCiB,CAAlB;;AAyCA,MAAIL,KAAK,CAACe,gBAAN,IAA0B,IAA9B,EAAoC;AAClCX,IAAAA,WAAW,GAAGA,WAAW,CAACe,GAAZ,CAAgB,UAACC,CAAD,EAAIT,KAAJ;AAAA,aAC5BA,KAAK,GAAG,CAAR,IAAa,OAAOS,CAAP,KAAa,QAA1B,GAAqCpB,KAAK,CAACe,gBAAN,GAAyBK,CAA9D,GAAkEA,CADtC;AAAA,KAAhB,CAAd;AAGAhB,IAAAA,WAAW,gBACT,gCAAC,UAAD;AAAM,MAAA,GAAG,EAAEJ,KAAK,CAACU;AAAjB,OAA0BW,8CAA1B,GACGjB,WADH,CADF;AAKD;;AACD,sBACE,gCAAC,wCAAD,CAAqB,QAArB;AACE,IAAA,KAAK,EAAE;AACLkB,MAAAA,YAAY,EAAEtB,KAAK,CAACuB,UADf;AAELC,MAAAA,SAAS,EAAExB,KAAK,CAACwB,SAFZ;AAGLC,MAAAA,cAAc,EAAEzB,KAAK,CAACyB,cAHjB;AAILV,MAAAA,gBAAgB,EAAEf,KAAK,CAACe;AAJnB;AADT,KAQGX,WARH,CADF;AAYD,CAnFM","sourcesContent":["import React, { useContext } from 'react'\n\nimport { COMPONENT_TYPE } from '../../constants'\nimport { RequestContext } from '../../contexts'\nimport { deepMapWithIndex } from '../../util/react'\nimport { Text } from '../text'\nimport { MultichannelButton } from './multichannel-button'\nimport { MultichannelCarousel } from './multichannel-carousel'\nimport { MultichannelContext } from './multichannel-context'\nimport { MultichannelReply } from './multichannel-reply'\nimport { MultichannelText } from './multichannel-text'\nimport {\n  isFacebook,\n  isWhatsapp,\n  MULTICHANNEL_WHATSAPP_PROPS,\n} from './multichannel-utils'\n\nexport const Multichannel = props => {\n  const requestContext = useContext(RequestContext)\n\n  if (!isWhatsapp(requestContext) && !isFacebook(requestContext)) {\n    return props.children\n  }\n  if (isFacebook(requestContext)) {\n    const newChildren = deepMapWithIndex(props.children, child => {\n      if (child && child.type && child.type.name === COMPONENT_TYPE.TEXT) {\n        return (\n          <MultichannelText {...child.props} key={child.key}>\n            {child.props.children}\n          </MultichannelText>\n        )\n      }\n      return child\n    })\n    return newChildren\n  }\n\n  let newChildren = deepMapWithIndex(props.children, (child, index) => {\n    if (child && child.type && child.type.name === COMPONENT_TYPE.BUTTON) {\n      return (\n        <MultichannelButton {...child.props} key={child.key}>\n          {child.props.children}\n        </MultichannelButton>\n      )\n    }\n    if (child && child.type && child.type.name === COMPONENT_TYPE.REPLY) {\n      return (\n        <MultichannelReply {...child.props} key={child.key}>\n          {child.props.children}\n        </MultichannelReply>\n      )\n    }\n    if (child && child.type && child.type.name === COMPONENT_TYPE.TEXT) {\n      return (\n        <MultichannelText\n          {...child.props}\n          {...props.text}\n          key={child.key}\n          {...(props.messageSeparator &&\n            index > 0 && { newline: props.messageSeparator })}\n        >\n          {child.props.children}\n        </MultichannelText>\n      )\n    }\n    if (child && child.type && child.type.name === COMPONENT_TYPE.CAROUSEL) {\n      return (\n        <MultichannelCarousel\n          {...child.props}\n          {...props.carousel}\n          key={child.key}\n        >\n          {child.props.children}\n        </MultichannelCarousel>\n      )\n    }\n    return child\n  })\n  if (props.messageSeparator != null) {\n    newChildren = newChildren.map((c, index) =>\n      index > 0 && typeof c === 'string' ? props.messageSeparator + c : c\n    )\n    newChildren = (\n      <Text key={props.key} {...MULTICHANNEL_WHATSAPP_PROPS}>\n        {newChildren}\n      </Text>\n    )\n  }\n  return (\n    <MultichannelContext.Provider\n      value={{\n        currentIndex: props.firstIndex,\n        boldIndex: props.boldIndex,\n        indexSeparator: props.indexSeparator,\n        messageSeparator: props.messageSeparator,\n      }}\n    >\n      {newChildren}\n    </MultichannelContext.Provider>\n  )\n}\n"],"file":"multichannel.js"}