"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultichannelText = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _contexts = require("../../contexts");

var _text = require("../text");

var _facebook = require("./facebook/facebook");

var _multichannelButton = require("./multichannel-button");

var _multichannelContext = require("./multichannel-context");

var _multichannelUtils = require("./multichannel-utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var MultichannelText = function MultichannelText(props) {
  var _props$buttonsAsText;

  var requestContext = (0, _react.useContext)(_contexts.RequestContext);
  var multichannelContext = (0, _react.useContext)(_multichannelContext.MultichannelContext);
  var postbackButtonsAsText = (_props$buttonsAsText = props.buttonsAsText) !== null && _props$buttonsAsText !== void 0 ? _props$buttonsAsText : true;
  var elements = [];

  var getText = function getText(children) {
    children = Array.isArray(children) ? children : [children];
    var text = children.filter(function (e) {
      return e && !e.type;
    }).map(function (e) {
      if (Array.isArray(e)) return getText(e);else return String(e);
    }).join('');

    if (text == undefined) {
      return [];
    }

    return [text].filter(function (t) {
      return t !== '';
    }); // to avoid line breaks when the carousel doesn't have title or subtitle
  };

  var getButtonsAndReplies = function getButtonsAndReplies() {
    return [].concat((0, _multichannelUtils.getMultichannelButtons)(_react["default"].Children.toArray(props.children)), (0, _multichannelUtils.getMultichannelReplies)(_react["default"].Children.toArray(props.children)));
  };

  var getWhatsappButtons = function getWhatsappButtons() {
    var postbackButtons = [];
    var urlButtons = [];
    var webviewButtons = [];

    var _iterator = _createForOfIteratorHelper(getButtonsAndReplies()),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var button = _step.value;
        if ((0, _multichannelUtils.elementHasUrl)(button)) urlButtons.push(button);
        if ((0, _multichannelUtils.elementHasPostback)(button)) postbackButtons.push(button);
        if ((0, _multichannelUtils.elementHasWebview)(button)) webviewButtons.push(button);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return {
      postbackButtons: postbackButtons,
      urlButtons: urlButtons,
      webviewButtons: webviewButtons
    };
  };

  var getDefaultIndex = function getDefaultIndex() {
    if (props.indexMode == undefined) {
      return undefined;
    }

    if (multichannelContext.currentIndex != null) {
      return multichannelContext.currentIndex;
    }

    return props.indexMode === 'letter' ? 'a' : 1;
  };

  var regenerateMultichannelButtons = function regenerateMultichannelButtons() {
    var newLineFirstButton = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    var generator = function generator(multichannelButton, i) {
      var type = (0, _multichannelUtils.getButtonType)(multichannelButton);
      var asText = type === _multichannelUtils.buttonTypes.POSTBACK ? postbackButtonsAsText : true;
      var newline = multichannelContext.messageSeparator == null && !newLineFirstButton && i === 0 ? '' : '\n';
      return /*#__PURE__*/_react["default"].createElement(_multichannelButton.MultichannelButton, (0, _extends2["default"])({
        key: "".concat(type).concat(i),
        newline: newline,
        asText: asText
      }, multichannelButton.props), multichannelButton.props.children);
    };

    return generator;
  };

  var splitPostbackButtons = function splitPostbackButtons(postbackButtons) {
    var messages = [];

    for (var i = 0; i < postbackButtons.length; i += _multichannelUtils.WHATSAPP_MAX_BUTTONS) {
      messages.push(postbackButtons.slice(i, i + _multichannelUtils.WHATSAPP_MAX_BUTTONS));
    }

    return messages;
  };

  if ((0, _multichannelUtils.isWhatsapp)(requestContext)) {
    var texts = getText(props.children);

    var _getWhatsappButtons = getWhatsappButtons(),
        postbackButtons = _getWhatsappButtons.postbackButtons,
        urlButtons = _getWhatsappButtons.urlButtons,
        webviewButtons = _getWhatsappButtons.webviewButtons;

    var textElements = texts.map(function (text) {
      return (props.newline || '') + text;
    });
    var webviewButtonElements = webviewButtons.map(regenerateMultichannelButtons(false));
    var buttonsTextSeparator = props.buttonsTextSeparator || _multichannelUtils.DEFAULT_WHATSAPP_MAX_BUTTON_SEPARATOR;

    if (!postbackButtonsAsText && postbackButtons.length > _multichannelUtils.WHATSAPP_MAX_BUTTONS) {
      var _urlButtonElements = urlButtons.map(regenerateMultichannelButtons(!!texts.length));

      var _postbackButtonElements = postbackButtons.map(regenerateMultichannelButtons(!!texts.length || !!urlButtons.length));

      var messagesPostbackButtons = splitPostbackButtons(_postbackButtonElements);

      var _messages = messagesPostbackButtons.map(function (postbackButtons, i) {
        if (i === 0) {
          var _ref;

          return (_ref = []).concat.apply(_ref, (0, _toConsumableArray2["default"])(textElements).concat((0, _toConsumableArray2["default"])(_urlButtonElements), (0, _toConsumableArray2["default"])(postbackButtons)));
        } else {
          var _ref2;

          return (_ref2 = []).concat.apply(_ref2, [buttonsTextSeparator].concat((0, _toConsumableArray2["default"])(postbackButtons)));
        }
      });

      if (webviewButtonElements.length) {
        _messages.push([buttonsTextSeparator].concat((0, _toConsumableArray2["default"])(webviewButtonElements)));
      }

      return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, _messages.map(function (message, i) {
        return /*#__PURE__*/_react["default"].createElement(_text.Text, (0, _extends2["default"])({
          key: i
        }, _multichannelUtils.MULTICHANNEL_WHATSAPP_PROPS, props), message);
      }));
    }

    multichannelContext.currentIndex = getDefaultIndex();
    var postbackButtonElements = postbackButtons.map(regenerateMultichannelButtons(!!texts.length));
    var urlButtonElements = urlButtons.map(regenerateMultichannelButtons(!!texts.length || !!postbackButtons.length));
    elements = [].concat((0, _toConsumableArray2["default"])(textElements), (0, _toConsumableArray2["default"])(postbackButtonElements), (0, _toConsumableArray2["default"])(urlButtonElements));

    if (multichannelContext.messageSeparator != null) {
      return elements;
    }

    var messages = [/*#__PURE__*/_react["default"].createElement(_text.Text, (0, _extends2["default"])({
      key: 0
    }, _multichannelUtils.MULTICHANNEL_WHATSAPP_PROPS, props), elements)];

    if (webviewButtonElements.length) {
      messages.push( /*#__PURE__*/_react["default"].createElement(_text.Text, (0, _extends2["default"])({
        key: 1
      }, _multichannelUtils.MULTICHANNEL_WHATSAPP_PROPS, props), buttonsTextSeparator, webviewButtonElements));
    }

    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, messages);
  }

  if ((0, _multichannelUtils.isFacebook)(requestContext)) {
    var text = getText(props.children);
    var multichannelFacebook = new _facebook.MultichannelFacebook();

    var _multichannelFacebook = multichannelFacebook.convertText(props, text[0]),
        _texts = _multichannelFacebook.texts,
        propsLastText = _multichannelFacebook.propsLastText,
        propsWithoutChildren = _multichannelFacebook.propsWithoutChildren;

    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, _texts && _texts.map(function (e, i) {
      return /*#__PURE__*/_react["default"].createElement(_text.Text, (0, _extends2["default"])({
        key: i
      }, propsWithoutChildren), e);
    }), /*#__PURE__*/_react["default"].createElement(_text.Text, propsLastText, propsLastText.children));
  } else {
    return /*#__PURE__*/_react["default"].createElement(_text.Text, props, props.children);
  }
};

exports.MultichannelText = MultichannelText;
//# sourceMappingURL=multichannel-text.js.map