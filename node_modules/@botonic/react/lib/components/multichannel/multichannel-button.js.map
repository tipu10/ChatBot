{"version":3,"sources":["../../../src/components/multichannel/multichannel-button.jsx"],"names":["MultichannelButton","props","requestContext","RequestContext","multichannelContext","MultichannelContext","hasUrl","Boolean","url","hasPath","path","hasPayload","payload","hasPostback","hasWebview","webview","getUrl","getWebview","increaseCurrentIndex","currentIndex","lastChar","charCodeAt","length","String","fromCharCode","formatIndex","index","boldIndex","getText","text","children","newline","separator","indexSeparator","truncateText","maxLength","ellipsis","substring","asText","WHATSAPP_MAX_BUTTON_CHARS"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\n\nimport { RequestContext } from '../../contexts'\nimport { Button } from '../button'\nimport { MultichannelContext } from './multichannel-context'\nimport { isWhatsapp, WHATSAPP_MAX_BUTTON_CHARS } from './multichannel-utils'\n\nexport const MultichannelButton = props => {\n  const requestContext = useContext(RequestContext)\n  const multichannelContext = useContext(MultichannelContext)\n\n  const hasUrl = () => Boolean(props.url)\n\n  const hasPath = () => Boolean(props.path)\n\n  const hasPayload = () => Boolean(props.payload)\n\n  const hasPostback = () => hasPath() || hasPayload()\n\n  const hasWebview = () => Boolean(props.webview)\n\n  const getUrl = () => props.url\n  const getWebview = () => props.webview\n\n  const increaseCurrentIndex = () => {\n    if (typeof multichannelContext.currentIndex === 'number') {\n      multichannelContext.currentIndex += 1\n    } else if (typeof multichannelContext.currentIndex === 'string') {\n      const lastChar = multichannelContext.currentIndex.charCodeAt(\n        multichannelContext.currentIndex.length - 1\n      )\n      multichannelContext.currentIndex = String.fromCharCode(lastChar + 1)\n    }\n  }\n\n  const formatIndex = index => {\n    const boldIndex = multichannelContext.boldIndex ?? false\n    return boldIndex ? `*${index}*` : index\n  }\n\n  const getText = () => {\n    let text = props.children\n    const newline = props.newline || ''\n    const separator = multichannelContext.indexSeparator || ' '\n    const index = multichannelContext.currentIndex\n      ? `${formatIndex(multichannelContext.currentIndex + separator)} `\n      : ''\n    if (hasPostback()) {\n      text = newline + `${index}${text}`\n    } else if (hasUrl()) {\n      text = newline + `- ${text}`\n    }\n    return text\n  }\n\n  const truncateText = (text, maxLength, ellipsis = '...') => {\n    if (text.length > maxLength) {\n      return text.substring(0, maxLength - ellipsis.length) + ellipsis\n    }\n    return text\n  }\n\n  if (isWhatsapp(requestContext)) {\n    const asText = props.asText ?? true\n    if (asText) {\n      if (hasUrl()) {\n        return `${getText()}: ${getUrl()}`\n      } else if (hasPath() || hasPayload()) {\n        const text = getText()\n        increaseCurrentIndex()\n        return `${text}`\n      } else if (hasWebview()) return <Button {...props}>{getText()}</Button>\n    }\n    return (\n      <Button {...props}>\n        {truncateText(props.children, WHATSAPP_MAX_BUTTON_CHARS)}\n      </Button>\n    )\n  }\n  return <Button {...props}>{props.children}</Button>\n}\n"],"file":"multichannel-button.js"}