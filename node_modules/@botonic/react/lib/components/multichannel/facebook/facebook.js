"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultichannelFacebook = exports.MAX_CHARACTERS_FACEBOOK = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var MAX_CHARACTERS_FACEBOOK = 640;
exports.MAX_CHARACTERS_FACEBOOK = MAX_CHARACTERS_FACEBOOK;

var MultichannelFacebook = /*#__PURE__*/function () {
  function MultichannelFacebook() {
    (0, _classCallCheck2["default"])(this, MultichannelFacebook);
  }

  (0, _createClass2["default"])(MultichannelFacebook, [{
    key: "convertText",
    value: function convertText(props, originalText) {
      if (originalText.length > MAX_CHARACTERS_FACEBOOK) {
        var texts = this.splitText(originalText);
        var lastText = texts.pop();

        var _this$getNewProps = this.getNewProps(props, lastText),
            propsLastText = _this$getNewProps.propsLastText,
            propsWithoutChildren = _this$getNewProps.propsWithoutChildren;

        return {
          texts: texts,
          propsLastText: propsLastText,
          propsWithoutChildren: propsWithoutChildren
        };
      }

      return {
        propsLastText: props
      };
    }
  }, {
    key: "splitText",
    value: function splitText(originalText) {
      var lines = originalText.split('\n');
      var initialText = lines.shift();
      var texts = [initialText];
      var index = 0;
      lines.forEach(function (currentText) {
        if (texts[index].length + currentText.length > MAX_CHARACTERS_FACEBOOK) {
          index++;
          texts.push(currentText);
        } else {
          texts[index] = texts[index].concat('\n', currentText);
        }
      });
      return texts;
    } // modifies the props to keep the children only for the last text message, this message will be the one with buttons and replies

  }, {
    key: "getNewProps",
    value: function getNewProps(props, lastText) {
      var propsLastText = _objectSpread({}, props);

      propsLastText.children = [lastText];

      if (Array.isArray(props.children)) {
        props.children.filter(function (e) {
          return e.type;
        }).forEach(function (e) {
          return propsLastText.children.push(e);
        });
      }

      var propsWithoutChildren = _objectSpread({}, props);

      delete propsWithoutChildren.children;
      return {
        propsLastText: propsLastText,
        propsWithoutChildren: propsWithoutChildren
      };
    }
  }]);
  return MultichannelFacebook;
}();

exports.MultichannelFacebook = MultichannelFacebook;
//# sourceMappingURL=facebook.js.map