"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultichannelButton = void 0;

var _react = _interopRequireWildcard(require("react"));

var _contexts = require("../../contexts");

var _button = require("../button");

var _multichannelContext = require("./multichannel-context");

var _multichannelUtils = require("./multichannel-utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var MultichannelButton = function MultichannelButton(props) {
  var requestContext = (0, _react.useContext)(_contexts.RequestContext);
  var multichannelContext = (0, _react.useContext)(_multichannelContext.MultichannelContext);

  var hasUrl = function hasUrl() {
    return Boolean(props.url);
  };

  var hasPath = function hasPath() {
    return Boolean(props.path);
  };

  var hasPayload = function hasPayload() {
    return Boolean(props.payload);
  };

  var hasPostback = function hasPostback() {
    return hasPath() || hasPayload();
  };

  var hasWebview = function hasWebview() {
    return Boolean(props.webview);
  };

  var getUrl = function getUrl() {
    return props.url;
  };

  var getWebview = function getWebview() {
    return props.webview;
  };

  var increaseCurrentIndex = function increaseCurrentIndex() {
    if (typeof multichannelContext.currentIndex === 'number') {
      multichannelContext.currentIndex += 1;
    } else if (typeof multichannelContext.currentIndex === 'string') {
      var lastChar = multichannelContext.currentIndex.charCodeAt(multichannelContext.currentIndex.length - 1);
      multichannelContext.currentIndex = String.fromCharCode(lastChar + 1);
    }
  };

  var formatIndex = function formatIndex(index) {
    var _multichannelContext$;

    var boldIndex = (_multichannelContext$ = multichannelContext.boldIndex) !== null && _multichannelContext$ !== void 0 ? _multichannelContext$ : false;
    return boldIndex ? "*".concat(index, "*") : index;
  };

  var getText = function getText() {
    var text = props.children;
    var newline = props.newline || '';
    var separator = multichannelContext.indexSeparator || ' ';
    var index = multichannelContext.currentIndex ? "".concat(formatIndex(multichannelContext.currentIndex + separator), " ") : '';

    if (hasPostback()) {
      text = newline + "".concat(index).concat(text);
    } else if (hasUrl()) {
      text = newline + "- ".concat(text);
    }

    return text;
  };

  var truncateText = function truncateText(text, maxLength) {
    var ellipsis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '...';

    if (text.length > maxLength) {
      return text.substring(0, maxLength - ellipsis.length) + ellipsis;
    }

    return text;
  };

  if ((0, _multichannelUtils.isWhatsapp)(requestContext)) {
    var _props$asText;

    var asText = (_props$asText = props.asText) !== null && _props$asText !== void 0 ? _props$asText : true;

    if (asText) {
      if (hasUrl()) {
        return "".concat(getText(), ": ").concat(getUrl());
      } else if (hasPath() || hasPayload()) {
        var text = getText();
        increaseCurrentIndex();
        return "".concat(text);
      } else if (hasWebview()) return /*#__PURE__*/_react["default"].createElement(_button.Button, props, getText());
    }

    return /*#__PURE__*/_react["default"].createElement(_button.Button, props, truncateText(props.children, _multichannelUtils.WHATSAPP_MAX_BUTTON_CHARS));
  }

  return /*#__PURE__*/_react["default"].createElement(_button.Button, props, props.children);
};

exports.MultichannelButton = MultichannelButton;
//# sourceMappingURL=multichannel-button.js.map