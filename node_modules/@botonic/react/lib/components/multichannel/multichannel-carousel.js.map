{"version":3,"sources":["../../../src/components/multichannel/multichannel-carousel.jsx"],"names":["MultichannelCarousel","props","requestContext","RequestContext","getButtons","node","concat","isMultichannelButton","elements","children","map","e","element","i","imageProps","undefined","title","subtitle","buttons","push","Array","isArray","header","showTitle","showSubtitle","indexMode","buttonsAsText"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAOO,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,KAAK,EAAI;AAC3C,MAAMC,cAAc,GAAG,uBAAWC,wBAAX,CAAvB;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,IAAI;AAAA,WACrB,GAAGC,MAAH,CAAU,4CAAoBD,IAApB,EAA0BE,uCAA1B,CAAV,CADqB;AAAA,GAAvB;;AAGA,MAAI,mCAAWL,cAAX,CAAJ,EAAgC;AAC9B,QAAMM,QAAQ,GAAGP,KAAK,CAACQ,QAAN,CACdC,GADc,CACV,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACV,KAAF,CAAQQ,QAAZ;AAAA,KADS,EAEdC,GAFc,CAEV,UAACE,OAAD,EAAUC,CAAV,EAAgB;AACnB,UAAIC,UAAU,GAAGC,SAAjB;AACA,UAAIC,KAAK,GAAGD,SAAZ;AACA,UAAIE,QAAQ,GAAGF,SAAf;AACA,UAAMG,OAAO,GAAG,EAAhB;;AAJmB,iDAMAN,OANA;AAAA;;AAAA;AAMnB,4DAA4B;AAAA,cAAjBP,IAAiB;;AAC1B,cAAI,mCAAWA,IAAX,EAAiB,KAAjB,CAAJ,EAA6B;AAC3BS,YAAAA,UAAU,GAAGT,IAAI,CAACJ,KAAlB;AACD;;AACD,cAAI,mCAAWI,IAAX,EAAiB,OAAjB,CAAJ,EAA+B;AAC7BW,YAAAA,KAAK,GAAGX,IAAI,CAACJ,KAAL,CAAWQ,QAAnB;AACD;;AACD,cAAI,mCAAWJ,IAAX,EAAiB,UAAjB,CAAJ,EAAkC;AAChCY,YAAAA,QAAQ,GAAGZ,IAAI,CAACJ,KAAL,CAAWQ,QAAtB;AACD;;AAED,cAAI,mCAAWJ,IAAX,EAAiB,oBAAjB,CAAJ,EAA4C;AAC1Ca,YAAAA,OAAO,CAACC,IAAR,CAAad,IAAb;AACD,WAbyB,CAc1B;;;AACA,cAAIe,KAAK,CAACC,OAAN,CAAchB,IAAd,CAAJ,EAAyB;AACvBa,YAAAA,OAAO,CAACC,IAAR,CAAaf,UAAU,CAACC,IAAD,CAAvB;AACD;AACF;AAxBkB;AAAA;AAAA;AAAA;AAAA;;AA0BnB,UAAIiB,MAAM,GAAG,EAAb;;AACA,UAAIrB,KAAK,CAACsB,SAAN,IAAmBP,KAAvB,EAA8B;AAC5BM,QAAAA,MAAM,cAAON,KAAK,cAAOA,KAAP,SAAkB,EAA9B,CAAN;;AACA,YAAIA,KAAK,IAAIC,QAAb,EAAuB;AACrBK,UAAAA,MAAM,IAAI,GAAV;AACD;AACF;;AACD,UAAIrB,KAAK,CAACuB,YAAN,IAAsBP,QAA1B,EAAoC;AAClCK,QAAAA,MAAM,eAAQL,QAAR,MAAN;AACD;;AAED;AAAA;AACE;AACA,wCAAC,kCAAD;AACE,UAAA,GAAG,EAAEJ,CADP;AAEE,UAAA,MAAM,EAAEA,CAFV;AAGE,UAAA,SAAS,EAAEZ,KAAK,CAACwB,SAHnB;AAIE,UAAA,aAAa,EAAExB,KAAK,CAACyB;AAJvB,WAMGJ,MAAM,IAAI,IANb,EAOGJ,OAPH;AAFF,QArCmB,CAkDnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KArEc,CAAjB;AAsEA,WAAOV,QAAP;AACD,GAxED,MAwEO;AACL,wBAAO,gCAAC,kBAAD,EAAcP,KAAd,EAAsBA,KAAK,CAACQ,QAA5B,CAAP;AACD;AACF,CAjFM,C,CAmFP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useContext } from 'react'\n\nimport { RequestContext } from '../../contexts'\nimport { Carousel } from '../carousel'\nimport { MultichannelText } from './multichannel-text'\nimport {\n  getFilteredElements,\n  isMultichannelButton,\n  isNodeKind,\n  isWhatsapp,\n} from './multichannel-utils'\n\nexport const MultichannelCarousel = props => {\n  const requestContext = useContext(RequestContext)\n\n  const getButtons = node =>\n    [].concat(getFilteredElements(node, isMultichannelButton))\n\n  if (isWhatsapp(requestContext)) {\n    const elements = props.children\n      .map(e => e.props.children)\n      .map((element, i) => {\n        let imageProps = undefined\n        let title = undefined\n        let subtitle = undefined\n        const buttons = []\n\n        for (const node of element) {\n          if (isNodeKind(node, 'Pic')) {\n            imageProps = node.props\n          }\n          if (isNodeKind(node, 'Title')) {\n            title = node.props.children\n          }\n          if (isNodeKind(node, 'Subtitle')) {\n            subtitle = node.props.children\n          }\n\n          if (isNodeKind(node, 'MultichannelButton')) {\n            buttons.push(node)\n          }\n          //TODO support fragment containing an array\n          if (Array.isArray(node)) {\n            buttons.push(getButtons(node))\n          }\n        }\n\n        let header = ''\n        if (props.showTitle && title) {\n          header += `${title ? `*${title}*` : ''}`\n          if (title && subtitle) {\n            header += ' '\n          }\n        }\n        if (props.showSubtitle && subtitle) {\n          header += `_${subtitle}_`\n        }\n\n        return (\n          // TODO: newkey only for 1 nested button\n          <MultichannelText\n            key={i}\n            newkey={i}\n            indexMode={props.indexMode}\n            buttonsAsText={props.buttonsAsText}\n          >\n            {header || null}\n            {buttons}\n          </MultichannelText>\n        )\n\n        // TODO: in the future, this would be the default mode\n        // } else {\n        // return (\n        //   <React.Fragment key={i}>\n        //     <Image\n        //       src={imageSrc}\n        //       caption={carouselToCaption(\n        //         i + 1,\n        //         title,\n        //         subtitle,\n        //         imageSrc,\n        //         buttonProps\n        //       )}\n        //     ></Image>\n        //   </React.Fragment>\n        // )\n        // }\n      })\n    return elements\n  } else {\n    return <Carousel {...props}>{props.children}</Carousel>\n  }\n}\n\n// const carouselToCaption = (index, title, subtitle, imageSrc, buttonProps) => {\n//   let caption = ''\n//   let header = `${title ? `*${title}*` : ''}`\n//   header += `${subtitle ? ` - _${subtitle}_` : ''}`\n//   let buttons = ''\n//   if (buttonProps.url) {\n//     buttons += ` - ${buttonProps.children}: ${buttonProps.url}`\n//     caption = `${header ? `${header}\\n` : ''}${buttons}`\n//   }\n//   if (buttonProps.payload || buttonProps.path) {\n//     buttons += `${index}. `\n//     caption = `${buttons}${buttonProps.children}`\n//   }\n//   return caption\n// }\n"],"file":"multichannel-carousel.js"}