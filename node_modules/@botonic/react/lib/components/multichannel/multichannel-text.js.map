{"version":3,"sources":["../../../src/components/multichannel/multichannel-text.jsx"],"names":["MultichannelText","props","requestContext","RequestContext","multichannelContext","MultichannelContext","postbackButtonsAsText","buttonsAsText","elements","getText","children","Array","isArray","text","filter","e","type","map","String","join","undefined","t","getButtonsAndReplies","concat","React","Children","toArray","getWhatsappButtons","postbackButtons","urlButtons","webviewButtons","button","push","getDefaultIndex","indexMode","currentIndex","regenerateMultichannelButtons","newLineFirstButton","generator","multichannelButton","i","asText","buttonTypes","POSTBACK","newline","messageSeparator","splitPostbackButtons","messages","length","WHATSAPP_MAX_BUTTONS","slice","texts","textElements","webviewButtonElements","buttonsTextSeparator","DEFAULT_WHATSAPP_MAX_BUTTON_SEPARATOR","urlButtonElements","postbackButtonElements","messagesPostbackButtons","message","MULTICHANNEL_WHATSAPP_PROPS","multichannelFacebook","MultichannelFacebook","convertText","propsLastText","propsWithoutChildren"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\n\nimport { RequestContext } from '../../contexts'\nimport { Text } from '../text'\nimport { MultichannelFacebook } from './facebook/facebook'\nimport { MultichannelButton } from './multichannel-button'\nimport { MultichannelContext } from './multichannel-context'\nimport {\n  buttonTypes,\n  DEFAULT_WHATSAPP_MAX_BUTTON_SEPARATOR,\n  elementHasPostback,\n  elementHasUrl,\n  elementHasWebview,\n  getButtonType,\n  getMultichannelButtons,\n  getMultichannelReplies,\n  isFacebook,\n  isWhatsapp,\n  MULTICHANNEL_WHATSAPP_PROPS,\n  WHATSAPP_MAX_BUTTONS,\n} from './multichannel-utils'\n\nexport const MultichannelText = props => {\n  const requestContext = useContext(RequestContext)\n  const multichannelContext = useContext(MultichannelContext)\n  const postbackButtonsAsText = props.buttonsAsText ?? true\n\n  let elements = []\n\n  const getText = children => {\n    children = Array.isArray(children) ? children : [children]\n    const text = children\n      .filter(e => e && !e.type)\n      .map(e => {\n        if (Array.isArray(e)) return getText(e)\n        else return String(e)\n      })\n      .join('')\n    if (text == undefined) {\n      return []\n    }\n    return [text].filter(t => t !== '') // to avoid line breaks when the carousel doesn't have title or subtitle\n  }\n\n  const getButtonsAndReplies = () =>\n    [].concat(\n      getMultichannelButtons(React.Children.toArray(props.children)),\n      getMultichannelReplies(React.Children.toArray(props.children))\n    )\n\n  const getWhatsappButtons = () => {\n    const postbackButtons = []\n    const urlButtons = []\n    const webviewButtons = []\n    for (const button of getButtonsAndReplies()) {\n      if (elementHasUrl(button)) urlButtons.push(button)\n      if (elementHasPostback(button)) postbackButtons.push(button)\n      if (elementHasWebview(button)) webviewButtons.push(button)\n    }\n    return { postbackButtons, urlButtons, webviewButtons }\n  }\n\n  const getDefaultIndex = () => {\n    if (props.indexMode == undefined) {\n      return undefined\n    }\n    if (multichannelContext.currentIndex != null) {\n      return multichannelContext.currentIndex\n    }\n    return props.indexMode === 'letter' ? 'a' : 1\n  }\n\n  const regenerateMultichannelButtons = (newLineFirstButton = true) => {\n    const generator = (multichannelButton, i) => {\n      const type = getButtonType(multichannelButton)\n      const asText =\n        type === buttonTypes.POSTBACK ? postbackButtonsAsText : true\n      const newline =\n        multichannelContext.messageSeparator == null &&\n        !newLineFirstButton &&\n        i === 0\n          ? ''\n          : '\\n'\n      return (\n        <MultichannelButton\n          key={`${type}${i}`}\n          newline={newline}\n          asText={asText}\n          {...multichannelButton.props}\n        >\n          {multichannelButton.props.children}\n        </MultichannelButton>\n      )\n    }\n    return generator\n  }\n\n  const splitPostbackButtons = postbackButtons => {\n    const messages = []\n    for (let i = 0; i < postbackButtons.length; i += WHATSAPP_MAX_BUTTONS) {\n      messages.push(postbackButtons.slice(i, i + WHATSAPP_MAX_BUTTONS))\n    }\n    return messages\n  }\n\n  if (isWhatsapp(requestContext)) {\n    const texts = getText(props.children)\n    const { postbackButtons, urlButtons, webviewButtons } = getWhatsappButtons()\n\n    const textElements = texts.map(text => {\n      return (props.newline || '') + text\n    })\n\n    const webviewButtonElements = webviewButtons.map(\n      regenerateMultichannelButtons(false)\n    )\n\n    const buttonsTextSeparator =\n      props.buttonsTextSeparator || DEFAULT_WHATSAPP_MAX_BUTTON_SEPARATOR\n\n    if (\n      !postbackButtonsAsText &&\n      postbackButtons.length > WHATSAPP_MAX_BUTTONS\n    ) {\n      const urlButtonElements = urlButtons.map(\n        regenerateMultichannelButtons(!!texts.length)\n      )\n      const postbackButtonElements = postbackButtons.map(\n        regenerateMultichannelButtons(!!texts.length || !!urlButtons.length)\n      )\n      const messagesPostbackButtons = splitPostbackButtons(\n        postbackButtonElements\n      )\n\n      const messages = messagesPostbackButtons.map((postbackButtons, i) => {\n        if (i === 0) {\n          return [].concat(\n            ...textElements,\n            ...urlButtonElements,\n            ...postbackButtons\n          )\n        } else {\n          return [].concat(buttonsTextSeparator, ...postbackButtons)\n        }\n      })\n      if (webviewButtonElements.length) {\n        messages.push([buttonsTextSeparator, ...webviewButtonElements])\n      }\n\n      return (\n        <>\n          {messages.map((message, i) => (\n            <Text key={i} {...MULTICHANNEL_WHATSAPP_PROPS} {...props}>\n              {message}\n            </Text>\n          ))}\n        </>\n      )\n    }\n\n    multichannelContext.currentIndex = getDefaultIndex()\n    const postbackButtonElements = postbackButtons.map(\n      regenerateMultichannelButtons(!!texts.length)\n    )\n    const urlButtonElements = urlButtons.map(\n      regenerateMultichannelButtons(!!texts.length || !!postbackButtons.length)\n    )\n\n    elements = [].concat(\n      [...textElements],\n      [...postbackButtonElements],\n      [...urlButtonElements]\n    )\n    if (multichannelContext.messageSeparator != null) {\n      return elements\n    }\n    const messages = [\n      <Text key={0} {...MULTICHANNEL_WHATSAPP_PROPS} {...props}>\n        {elements}\n      </Text>,\n    ]\n    if (webviewButtonElements.length) {\n      messages.push(\n        <Text key={1} {...MULTICHANNEL_WHATSAPP_PROPS} {...props}>\n          {buttonsTextSeparator}\n          {webviewButtonElements}\n        </Text>\n      )\n    }\n\n    return <>{messages}</>\n  }\n\n  if (isFacebook(requestContext)) {\n    const text = getText(props.children)\n    const multichannelFacebook = new MultichannelFacebook()\n    const {\n      texts,\n      propsLastText,\n      propsWithoutChildren,\n    } = multichannelFacebook.convertText(props, text[0])\n    return (\n      <>\n        {texts &&\n          texts.map((e, i) => (\n            <Text key={i} {...propsWithoutChildren}>\n              {e}\n            </Text>\n          ))}\n        <Text {...propsLastText}>{propsLastText.children}</Text>\n      </>\n    )\n  } else {\n    return <Text {...props}>{props.children}</Text>\n  }\n}\n"],"file":"multichannel-text.js"}