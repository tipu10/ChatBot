{"version":3,"sources":["../../src/components/text.jsx"],"names":["serializeText","children","Array","isArray","text","filter","e","type","map","String","join","serialize","textProps","markdown","Text","props","defaultTextProps","undefined","Children","toArray","INPUT","TEXT"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,QAAQ,EAAI;AAChCA,EAAAA,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcF,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAhD;AACA,MAAMG,IAAI,GAAGH,QAAQ,CAClBI,MADU,CACH,UAAAC,CAAC;AAAA,WAAI,CAACA,CAAC,CAACC,IAAP;AAAA,GADE,EAEVC,GAFU,CAEN,UAAAF,CAAC,EAAI;AACR,QAAIJ,KAAK,CAACC,OAAN,CAAcG,CAAd,CAAJ,EAAsB,OAAON,aAAa,CAACM,CAAD,CAApB,CAAtB,KACK,OAAOG,MAAM,CAACH,CAAD,CAAb;AACN,GALU,EAMVI,IANU,CAML,EANK,CAAb;AAOA,SAAON,IAAP;AACD,CAVD;;AAYA,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAAAC,SAAS,EAAI;AAC7B,MAAI,CAACA,SAAS,CAACC,QAAf,EACE,OAAO;AACLT,IAAAA,IAAI,EAAEJ,aAAa,CAACY,SAAS,CAACX,QAAX;AADd,GAAP;AAGF,SAAO;AAAEG,IAAAA,IAAI,EAAE,iCAAkBQ,SAAS,CAACX,QAA5B;AAAR,GAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACO,IAAMa,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AAC3B,MAAMC,gBAAgB,GAAG;AACvBH,IAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,KAAmBI,SAAnB,GAA+B,IAA/B,GAAsCF,KAAK,CAACF;AAD/B,GAAzB;AAGA,MAAMD,SAAS,GAAG,qFACbG,KADa,GAEbC,gBAFa,GAGb;AAAEf,IAAAA,QAAQ,EAAEiB,gBAASC,OAAT,CAAiBJ,KAAK,CAACd,QAAvB;AAAZ,GAHa,EAAlB;AAKA,MAAI,CAACW,SAAS,CAACC,QAAf,EACE,oBACE,gCAAC,gBAAD;AAAS,IAAA,IAAI,EAAEF,SAAS,CAACC,SAAD;AAAxB,KAAyCA,SAAzC;AAAoD,IAAA,IAAI,EAAEQ,YAAMC;AAAhE,MACGT,SAAS,CAACX,QADb,CADF;AAKF,sBACE,gCAAC,gBAAD;AAAS,IAAA,IAAI,EAAEU,SAAS,CAACC,SAAD;AAAxB,KAAyCA,SAAzC;AAAoD,IAAA,IAAI,EAAEQ,YAAMC;AAAhE,MACG,kCAAmBT,SAAS,CAACX,QAA7B,CADH,CADF;AAKD,CApBM;;;AAsBPa,IAAI,CAACH,SAAL,GAAiBA,SAAjB","sourcesContent":["import { INPUT } from '@botonic/core'\nimport React, { Children } from 'react'\n\nimport { mapObjectNonBooleanValues } from '../util/react'\nimport { serializeMarkdown, toMarkdownChildren } from './markdown'\nimport { Message } from './message'\n\nconst serializeText = children => {\n  children = Array.isArray(children) ? children : [children]\n  const text = children\n    .filter(e => !e.type)\n    .map(e => {\n      if (Array.isArray(e)) return serializeText(e)\n      else return String(e)\n    })\n    .join('')\n  return text\n}\n\nconst serialize = textProps => {\n  if (!textProps.markdown)\n    return {\n      text: serializeText(textProps.children),\n    }\n  return { text: serializeMarkdown(textProps.children) }\n}\n\n/**\n *\n * @param {TextProps} props\n * @returns {JSX.Element}\n */\nexport const Text = props => {\n  const defaultTextProps = {\n    markdown: props.markdown === undefined ? true : props.markdown,\n  }\n  const textProps = mapObjectNonBooleanValues({\n    ...props,\n    ...defaultTextProps,\n    ...{ children: Children.toArray(props.children) },\n  })\n  if (!textProps.markdown)\n    return (\n      <Message json={serialize(textProps)} {...textProps} type={INPUT.TEXT}>\n        {textProps.children}\n      </Message>\n    )\n  return (\n    <Message json={serialize(textProps)} {...textProps} type={INPUT.TEXT}>\n      {toMarkdownChildren(textProps.children)}\n    </Message>\n  )\n}\n\nText.serialize = serialize\n"],"file":"text.js"}