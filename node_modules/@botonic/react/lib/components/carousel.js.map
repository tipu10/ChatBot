{"version":3,"sources":["../../src/components/carousel.jsx"],"names":["StyledCarousel","styled","div","props","carouselArrowsEnabled","StyledItems","StyledArrowContainer","COLORS","SILVER","justifyContent","left","right","arrow","StyledArrow","img","serialize","carouselProps","carouselChildren","children","Array","isArray","type","INPUT","CAROUSEL","elements","map","e","Carousel","WebchatContext","getThemeProperty","content","scrollbarOptions","enable","autoHide","WEBCHAT","CUSTOM_PROPERTIES","scrollbar","hasLeftArrow","setLeftArrow","hasRightArrow","setRightArrow","carouselRef","CustomCarouselLeftArrow","customCarouselLeftArrow","undefined","CustomCarouselRightArrow","customCarouselRightArrow","enableCarouselArrows","scrollCarouselBy","value","current","scrollBy","behavior","setArrowsVisibility","event","carousel","currentTarget","maxRightScroll","scrollWidth","offsetWidth","DEFAULTS","ELEMENT_MARGIN_RIGHT","scrollLeft","getArrows","ELEMENT_WIDTH","LeftArrow","RightArrow","addEventListener","attachEvent","ButtonsDisabler","updateChildrenButtons","width","padding","backgroundColor","TRANSPARENT"],"mappings":"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","sourcesContent":["import { INPUT, isBrowser } from '@botonic/core'\nimport React, { useContext, useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\n\nimport LeftArrow from '../assets/leftArrow.svg'\nimport RightArrow from '../assets/rightArrow.svg'\nimport { COLORS, WEBCHAT } from '../constants'\nimport { WebchatContext } from '../contexts'\nimport { resolveImage } from '../util/environment'\nimport { StyledScrollbar } from '../webchat/components/styled-scrollbar'\nimport { ButtonsDisabler } from './buttons-disabler'\nimport { Message } from './message'\n\nconst StyledCarousel = styled.div`\n  padding: 10px 0px;\n  display: flex;\n  flex-direction: row;\n  max-width: 100%;\n  ${props => props.carouselArrowsEnabled && 'overflow-x: auto;'}\n`\n\nconst StyledItems = styled.div`\n  display: flex;\n`\n\nconst StyledArrowContainer = styled.div`\n  position: absolute;\n  top: calc(50% - 20px);\n  height: 40px;\n  width: 25px;\n  background: ${COLORS.SILVER};\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  justify-content: ${props => props.justifyContent};\n  left: ${props => props.left}px;\n  right: ${props => props.right}px;\n  border-top-${props => props.arrow}-radius: 30px;\n  border-bottom-${props => props.arrow}-radius: 30px;\n`\nconst StyledArrow = styled.img`\n  width: 20px;\n  height: 20px;\n`\n\nconst serialize = carouselProps => {\n  let carouselChildren = carouselProps.children\n  if (!Array.isArray(carouselChildren)) carouselChildren = [carouselChildren]\n  return {\n    type: INPUT.CAROUSEL,\n    elements: carouselChildren.map(\n      e => e && e.type && e.type.serialize && e.type.serialize(e.props)\n    ),\n  }\n}\n\n/**\n *\n * @param {MessageProps} props\n * @returns {JSX.Element}\n */\nexport const Carousel = props => {\n  const { getThemeProperty } = useContext(WebchatContext)\n  let content = props.children\n  const scrollbarOptions = {\n    ...{ enable: true, autoHide: true },\n    ...getThemeProperty(WEBCHAT.CUSTOM_PROPERTIES.scrollbar),\n  }\n  const [hasLeftArrow, setLeftArrow] = useState(false)\n  const [hasRightArrow, setRightArrow] = useState(true)\n  const carouselRef = useRef(null)\n  const CustomCarouselLeftArrow = getThemeProperty(\n    WEBCHAT.CUSTOM_PROPERTIES.customCarouselLeftArrow,\n    undefined\n  )\n  const CustomCarouselRightArrow = getThemeProperty(\n    WEBCHAT.CUSTOM_PROPERTIES.customCarouselRightArrow,\n    undefined\n  )\n  const carouselArrowsEnabled = getThemeProperty(\n    WEBCHAT.CUSTOM_PROPERTIES.enableCarouselArrows,\n    true\n  )\n\n  const scrollCarouselBy = value => {\n    carouselRef.current.scrollBy({\n      left: value,\n      behavior: 'smooth',\n    })\n  }\n\n  const setArrowsVisibility = event => {\n    const carousel = event.currentTarget\n    const maxRightScroll =\n      carousel.scrollWidth -\n      carousel.offsetWidth -\n      WEBCHAT.DEFAULTS.ELEMENT_MARGIN_RIGHT\n    setLeftArrow(carousel.scrollLeft !== 0)\n    setRightArrow(carousel.scrollLeft < maxRightScroll)\n  }\n\n  const getArrows = () => {\n    const scrollBy =\n      WEBCHAT.DEFAULTS.ELEMENT_WIDTH + WEBCHAT.DEFAULTS.ELEMENT_MARGIN_RIGHT\n    return (\n      <>\n        {hasLeftArrow &&\n          (CustomCarouselLeftArrow ? (\n            <CustomCarouselLeftArrow scrollCarouselBy={scrollCarouselBy} />\n          ) : (\n            <StyledArrowContainer\n              left={0}\n              arrow={'right'}\n              justifyContent={'flex-start'}\n              onClick={() => scrollCarouselBy(-scrollBy)}\n            >\n              <StyledArrow src={resolveImage(LeftArrow)} />\n            </StyledArrowContainer>\n          ))}\n        {hasRightArrow &&\n          (CustomCarouselRightArrow ? (\n            <CustomCarouselRightArrow scrollCarouselBy={scrollCarouselBy} />\n          ) : (\n            <StyledArrowContainer\n              right={0}\n              arrow={'left'}\n              justifyContent={'flex-end'}\n              onClick={() => scrollCarouselBy(scrollBy)}\n            >\n              <StyledArrow src={resolveImage(RightArrow)} />\n            </StyledArrowContainer>\n          ))}\n      </>\n    )\n  }\n\n  useEffect(() => {\n    const carousel = carouselRef.current\n    if (carousel && carousel.addEventListener) {\n      carousel.addEventListener('scroll', setArrowsVisibility, false)\n    } else if (carousel && carousel.attachEvent) {\n      carousel.attachEvent('scroll', setArrowsVisibility)\n    }\n  }, [carouselRef.current])\n\n  const carouselProps = {\n    ...props,\n    children: ButtonsDisabler.updateChildrenButtons(props.children),\n  }\n\n  if (isBrowser()) {\n    content = (\n      <StyledScrollbar\n        scrollbar={scrollbarOptions}\n        autoHide={scrollbarOptions.autoHide}\n      >\n        <StyledCarousel\n          ref={carouselRef}\n          carouselArrowsEnabled={carouselArrowsEnabled}\n        >\n          <StyledItems>{carouselProps.children}</StyledItems>\n          {carouselArrowsEnabled && getArrows()}\n        </StyledCarousel>\n      </StyledScrollbar>\n    )\n  }\n\n  return (\n    <Message\n      style={{ width: '85%', padding: 0, backgroundColor: COLORS.TRANSPARENT }}\n      blob={false}\n      json={serialize(carouselProps)}\n      type={INPUT.CAROUSEL}\n      {...carouselProps}\n    >\n      {content}\n    </Message>\n  )\n}\n\nCarousel.serialize = serialize\n"],"file":"carousel.js"}