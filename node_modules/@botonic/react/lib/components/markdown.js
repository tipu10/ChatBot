"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toMarkdownChildren = exports.serializeMarkdown = exports.renderMarkdown = exports.renderLinks = exports.getMarkdownStyle = exports.getDefaultMarkdownStyle = exports.ESCAPED_LINE_BREAK = void 0;

var _markdownIt = _interopRequireDefault(require("markdown-it"));

var BR_STRING_TAG = '<br/>';
var BR_STRING_TAG_REGEX = new RegExp('<br\\s*/?>', 'g');
var ESCAPED_LINE_BREAK = '&lt;br&gt;';
exports.ESCAPED_LINE_BREAK = ESCAPED_LINE_BREAK;
var ESCAPED_LINE_BREAK_REGEX = new RegExp(ESCAPED_LINE_BREAK, 'g');

var isLineBreakElement = function isLineBreakElement(element) {
  return element.type === 'br';
};

var withLinksTarget = function withLinksTarget(renderer) {
  var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_blank';

  // Support opening links in new tabs: https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md#renderer
  var newRenderer = renderer.renderer.rules.link_open || function (tokens, idx, options, env, self) {
    return self.renderToken(tokens, idx, options);
  };

  renderer.renderer.rules.link_open = function (tokens, idx, options, env, self) {
    var aIndex = tokens[idx].attrIndex('target');
    if (aIndex < 0) tokens[idx].attrPush(['target', target]);else tokens[idx].attrs[aIndex][1] = target;
    return newRenderer(tokens, idx, options, env, self);
  };
};

var configureLinksRenderer = function configureLinksRenderer() {
  // zero preset comes with all options disabled, only enabling links
  var linksRenderer = new _markdownIt["default"]('zero', {
    linkify: true
  }).enable(['linkify']);
  withLinksTarget(linksRenderer);
  return linksRenderer;
};

var configureMarkdownRenderer = function configureMarkdownRenderer() {
  var markdownRenderer = new _markdownIt["default"]({
    html: true,
    linkify: true,
    typographer: true
  });
  withLinksTarget(markdownRenderer);
  return markdownRenderer;
};

var markdownRenderer = configureMarkdownRenderer();

var renderMarkdown = function renderMarkdown(text) {
  // markdown-it renderer expects '<br/>' strings to render correctly line breaks
  // Supporting multiline: https://stackoverflow.com/a/20543835
  text = text.map(function (e) {
    if (isLineBreakElement(e)) return BR_STRING_TAG;else if (typeof e === 'string') return e.replace(BR_STRING_TAG_REGEX, BR_STRING_TAG).replace(ESCAPED_LINE_BREAK_REGEX, BR_STRING_TAG);else return String(e);
  }).join('');
  return markdownRenderer.render(text);
};

exports.renderMarkdown = renderMarkdown;
var linksRenderer = configureLinksRenderer();

var renderLinks = function renderLinks(text) {
  return linksRenderer.render(text);
};

exports.renderLinks = renderLinks;

var serializeMarkdown = function serializeMarkdown(children) {
  children = Array.isArray(children) ? children : [children];
  var text = children.filter(function (e) {
    return isLineBreakElement(e) || !e.type;
  }).map(function (e) {
    if (Array.isArray(e)) return serializeMarkdown(e);
    if (isLineBreakElement(e)) return ESCAPED_LINE_BREAK;else return String(e).replace(BR_STRING_TAG_REGEX, ESCAPED_LINE_BREAK);
  }).join('');
  return text;
};

exports.serializeMarkdown = serializeMarkdown;

var toMarkdownChildren = function toMarkdownChildren(children) {
  return children.map(function (e) {
    return isLineBreakElement(e) ? ESCAPED_LINE_BREAK : e;
  });
};

exports.toMarkdownChildren = toMarkdownChildren;

var getMarkdownStyle = function getMarkdownStyle(getThemeFn, defaultColor) {
  return getThemeFn('markdownStyle', getDefaultMarkdownStyle(defaultColor));
};

exports.getMarkdownStyle = getMarkdownStyle;

var getDefaultMarkdownStyle = function getDefaultMarkdownStyle(color) {
  return "\n*{\n  margin: 0px;\n}\n\na {\n  text-decoration:none;\n}\n\na:link{\n  color:".concat(color, "; \n}\n\na:visited {\n  color:").concat(color, ";\n}\n\na:hover {\n  text-shadow: 0px 1px black;\n}\n\nblockquote {\n  margin: 0;\n  padding-left: 1.4rem;\n  border-left: 4px solid #dadada; \n}\n\npre code {\n  margin: 0;\n  padding: 0;\n  white-space: pre;\n  border: none;\n  background: transparent; \n}\n\npre {\n  background-color: #f8f8f8;\n  border: 1px solid #cccccc;\n  font-size: 13px;\n  line-height: 19px;\n  overflow: auto;\n  padding: 6px 10px;\n  border-radius: 3px; \n}\n\ncode, tt {\n  margin: 0 2px;\n  padding: 0 5px;\n  white-space: nowrap;\n  border: 1px solid #eaeaea;\n  background-color: #f8f8f8;\n  border-radius: 3px; \n}\n\npre {\n  background-color: #f8f8f8;\n  border: 1px solid #cccccc;\n  font-size: 13px;\n  line-height: 19px;\n  overflow: auto;\n  padding: 6px 10px;\n  border-radius: 3px; \n}\n\npre code, pre tt {\n  background-color: transparent;\n  border: none; \n}\n  \ntable, td, th {\n  border: 1px solid black;\n  padding:10px;\n}\n");
};

exports.getDefaultMarkdownStyle = getDefaultMarkdownStyle;
//# sourceMappingURL=markdown.js.map