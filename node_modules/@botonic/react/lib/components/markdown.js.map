{"version":3,"sources":["../../src/components/markdown.js"],"names":["BR_STRING_TAG","BR_STRING_TAG_REGEX","RegExp","ESCAPED_LINE_BREAK","ESCAPED_LINE_BREAK_REGEX","isLineBreakElement","element","type","withLinksTarget","renderer","target","newRenderer","rules","link_open","tokens","idx","options","env","self","renderToken","aIndex","attrIndex","attrPush","attrs","configureLinksRenderer","linksRenderer","MarkdownIt","linkify","enable","configureMarkdownRenderer","markdownRenderer","html","typographer","renderMarkdown","text","map","e","replace","String","join","render","renderLinks","serializeMarkdown","children","Array","isArray","filter","toMarkdownChildren","getMarkdownStyle","getThemeFn","defaultColor","getDefaultMarkdownStyle","color"],"mappings":"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","sourcesContent":["import MarkdownIt from 'markdown-it'\n\nconst BR_STRING_TAG = '<br/>'\nconst BR_STRING_TAG_REGEX = new RegExp('<br\\\\s*/?>', 'g')\nexport const ESCAPED_LINE_BREAK = '&lt;br&gt;'\nconst ESCAPED_LINE_BREAK_REGEX = new RegExp(ESCAPED_LINE_BREAK, 'g')\nconst isLineBreakElement = element => element.type === 'br'\n\nconst withLinksTarget = (renderer, target = '_blank') => {\n  // Support opening links in new tabs: https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md#renderer\n  const newRenderer =\n    renderer.renderer.rules.link_open ||\n    function (tokens, idx, options, env, self) {\n      return self.renderToken(tokens, idx, options)\n    }\n  renderer.renderer.rules.link_open = function (\n    tokens,\n    idx,\n    options,\n    env,\n    self\n  ) {\n    const aIndex = tokens[idx].attrIndex('target')\n    if (aIndex < 0) tokens[idx].attrPush(['target', target])\n    else tokens[idx].attrs[aIndex][1] = target\n    return newRenderer(tokens, idx, options, env, self)\n  }\n}\n\nconst configureLinksRenderer = () => {\n  // zero preset comes with all options disabled, only enabling links\n  const linksRenderer = new MarkdownIt('zero', { linkify: true }).enable([\n    'linkify',\n  ])\n  withLinksTarget(linksRenderer)\n  return linksRenderer\n}\n\nconst configureMarkdownRenderer = () => {\n  const markdownRenderer = new MarkdownIt({\n    html: true,\n    linkify: true,\n    typographer: true,\n  })\n  withLinksTarget(markdownRenderer)\n  return markdownRenderer\n}\n\nconst markdownRenderer = configureMarkdownRenderer()\nexport const renderMarkdown = text => {\n  // markdown-it renderer expects '<br/>' strings to render correctly line breaks\n  // Supporting multiline: https://stackoverflow.com/a/20543835\n  text = text\n    .map(e => {\n      if (isLineBreakElement(e)) return BR_STRING_TAG\n      else if (typeof e === 'string')\n        return e\n          .replace(BR_STRING_TAG_REGEX, BR_STRING_TAG)\n          .replace(ESCAPED_LINE_BREAK_REGEX, BR_STRING_TAG)\n      else return String(e)\n    })\n    .join('')\n  return markdownRenderer.render(text)\n}\n\nconst linksRenderer = configureLinksRenderer()\nexport const renderLinks = text => {\n  return linksRenderer.render(text)\n}\n\nexport const serializeMarkdown = children => {\n  children = Array.isArray(children) ? children : [children]\n  const text = children\n    .filter(e => isLineBreakElement(e) || !e.type)\n    .map(e => {\n      if (Array.isArray(e)) return serializeMarkdown(e)\n      if (isLineBreakElement(e)) return ESCAPED_LINE_BREAK\n      else return String(e).replace(BR_STRING_TAG_REGEX, ESCAPED_LINE_BREAK)\n    })\n    .join('')\n  return text\n}\n\nexport const toMarkdownChildren = children =>\n  children.map(e => (isLineBreakElement(e) ? ESCAPED_LINE_BREAK : e))\n\nexport const getMarkdownStyle = (getThemeFn, defaultColor) =>\n  getThemeFn('markdownStyle', getDefaultMarkdownStyle(defaultColor))\n\nexport const getDefaultMarkdownStyle = color => `\n*{\n  margin: 0px;\n}\n\na {\n  text-decoration:none;\n}\n\na:link{\n  color:${color}; \n}\n\na:visited {\n  color:${color};\n}\n\na:hover {\n  text-shadow: 0px 1px black;\n}\n\nblockquote {\n  margin: 0;\n  padding-left: 1.4rem;\n  border-left: 4px solid #dadada; \n}\n\npre code {\n  margin: 0;\n  padding: 0;\n  white-space: pre;\n  border: none;\n  background: transparent; \n}\n\npre {\n  background-color: #f8f8f8;\n  border: 1px solid #cccccc;\n  font-size: 13px;\n  line-height: 19px;\n  overflow: auto;\n  padding: 6px 10px;\n  border-radius: 3px; \n}\n\ncode, tt {\n  margin: 0 2px;\n  padding: 0 5px;\n  white-space: nowrap;\n  border: 1px solid #eaeaea;\n  background-color: #f8f8f8;\n  border-radius: 3px; \n}\n\npre {\n  background-color: #f8f8f8;\n  border: 1px solid #cccccc;\n  font-size: 13px;\n  line-height: 19px;\n  overflow: auto;\n  padding: 6px 10px;\n  border-radius: 3px; \n}\n\npre code, pre tt {\n  background-color: transparent;\n  border: none; \n}\n  \ntable, td, th {\n  border: 1px solid black;\n  padding:10px;\n}\n`\n"],"file":"markdown.js"}