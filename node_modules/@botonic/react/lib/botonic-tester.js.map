{"version":3,"sources":["../src/botonic-tester.jsx"],"names":["BotonicInputTester","bot","inp","session","lastRoutePath","input","type","INPUT","TEXT","data","res","response","POSTBACK","payload","BotonicOutputTester","out","replies","ReactDOMServer","renderToStaticMarkup","text","path","Error","i","length","r","push","reply"],"mappings":"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","sourcesContent":["import { INPUT } from '@botonic/core'\nimport React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport decode from 'unescape'\n\nimport { Reply } from './components/reply'\nimport { Text } from './components/text'\n\nexport class BotonicInputTester {\n  constructor(bot) {\n    this.bot = bot\n  }\n  async text(inp, session = {}, lastRoutePath = '') {\n    const res = await this.bot.input({\n      input: { type: INPUT.TEXT, data: inp },\n      session: session,\n      lastRoutePath: lastRoutePath,\n    })\n    return decode(res.response)\n  }\n\n  async payload(inp, session = {}, lastRoutePath = '') {\n    const res = await this.bot.input({\n      input: { type: INPUT.POSTBACK, payload: inp },\n      session: session,\n      lastRoutePath: lastRoutePath,\n    })\n    return decode(res.response)\n  }\n\n  async path(inp, session = {}, lastRoutePath = '') {\n    const res = await this.bot.input({\n      input: { type: INPUT.TEXT, payload: `__PATH_PAYLOAD__${inp}` },\n      session: session,\n      lastRoutePath: lastRoutePath,\n    })\n    return decode(res.response)\n  }\n}\n\nexport class BotonicOutputTester {\n  constructor(bot) {\n    this.bot = bot\n  }\n\n  text(out, replies = null) {\n    return decode(\n      ReactDOMServer.renderToStaticMarkup(\n        !replies ? (\n          <Text>{out}</Text>\n        ) : (\n          <Text>\n            {out}\n            {replies}\n          </Text>\n        )\n      )\n    )\n  }\n\n  reply({ text, payload = null, path = null }) {\n    if (payload) {\n      return decode(\n        ReactDOMServer.renderToStaticMarkup(\n          <Reply payload={payload}>{text}</Reply>\n        )\n      )\n    }\n    if (path) {\n      return decode(\n        ReactDOMServer.renderToStaticMarkup(<Reply path={path}>{text}</Reply>)\n      )\n    }\n    throw new Error('reply should contain a payload or a path')\n  }\n\n  replies(...args) {\n    const replies = []\n    for (let i = 0; i < args.length; i++) {\n      const r = args[i]\n      replies.push(\n        this.reply({ text: r.text, payload: r.payload, path: r.path })\n      )\n    }\n    return replies\n  }\n}\n"],"file":"botonic-tester.js"}